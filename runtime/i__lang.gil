#internal

proc i__lang_assert(b, msg) {
        goto [b] ctn err;
  ctn:  ret := undefined;
        return;
  err:  fail[ASSERT](msg)
};

proc i__bool_of_lang_int(i) {
       goto [i = 1i] tr ctn;
  tr:  ret := true;
       return;
  ctn: goto [i = 0i] fl err;
  fl:  ret := false;
       return;
  err: fail[BOOL_VALUE]("invalid boolean", i)   
};

proc i__lang_int_of_bool(b) {
       goto [b] one zer;
  one: ret := 1i;
       return;
  zer: ret := 0i;
       return
};

proc i__slice_index(p, idx) {
       addr := l-nth(p, 0i);
       proj := l-nth(p, 1i);
       goto [l-len proj = 0] spl cpl;
  spl: ret := {{ addr, {{ {{ "i", idx }} }} }};
       return;
  cpl: plen := l-len proj;
       lidx := l-nth(proj, plen i- 1i);
       rest := l-sub(proj, 0i, plen i- 1i);
       goto [l-nth(lidx, 0i) = "i"] ctn err;
  ctn: nlidx := {{ "i", l-nth(lidx, 1i) i+ idx }};
       ret := {{ addr, l+(rest, {{ nlidx }}) }};
       return;
  err: fail[ADDIDX](p, idx)
};