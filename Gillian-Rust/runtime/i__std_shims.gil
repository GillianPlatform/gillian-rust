(* PROCS *)

proc "core::slice::<impl [T]>::len"(T, p) { (* First param is ignored *)
       goto [(typeOf l-nth(p, 0i)) = List] ctn err;
  ctn: ret := l-nth(p, 1i);
       return;
  err: fail[PTRREPR]("should be a fat pointer", p)
};

proc "core::ptr::slice_from_raw_parts"(T, p, l) {
     ret := {{ p, l }};
     return
};

proc "std::ptr::NonNull::<T>::as_ptr"(T, p) {
     ret := l-nth(p, 0i);
     return
};

proc "std::ptr::NonNull::<T>::as_mut"(pLft_a, pLft_b, T, p) {
        r := [load_value](l-nth(p, 0i), l-nth(p, 1i), {{ "adt", "NonNull", {{ T }} }}, true);
        ret := l-nth(l-nth(r, 0i), 0i);
        return
};

proc "std::boxed::Box::<T>::new"(T, v) {
     global := {{}};
     ptr := [alloc](T);
     u := [store_value](l-nth(ptr, 0i), l-nth(ptr, 1i), T, v);
     non_null := {{ ptr }};
     phantom_data := {{}};
     unique := {{ non_null, phantom_data }};
     box := {{ unique, global }};
     ret := box;
     return
};

proc "std::option::Option::<T>::as_mut"(pLft_a, T, p) {
         discr := [load_discr](l-nth(p, 0i), l-nth(p, 1i), {{ "adt", "Option", {{ T }} }});
         discr := l-nth(discr, 0i);
         goto [discr = 0i] nn ot;
     nn: ret := {{ 0i, {{ }} }};
         return;
     ot: goto [discr = 1i] sm er;
     sm: ref := {{
               l-nth(p, 0i),
               l+ (
                    l-nth(p, 1i),
                    {{ {{ "vf", 0i, {{ "adt", "Option", {{ T }} }}, 1i }} }}
               )
          }};
          ret := {{ 1i, {{ ref }} }};
         return;
     er: fail[TYPERR]("Invalid discr")
};

(* pub fn map<U, F>(self, f: F) -> Option<U> where F: FnOnce(T) -> U  *)
proc "std::option::Option::<T>::map"(T, U, F, opt, fname) {
          discr := l-nth(opt, 0i);
          goto [discr = 0i] nn so;
     nn:  ret := {{ 0i, {{ }} }};
          return; 
          (* The last argument is the closure name *)
     so:  val := l-nth(l-nth(opt, 1i), 0i);
          res := fname(U, val);
          ret := {{ 1i, {{ res }} }};
          return
};

proc "std::option::Option::<T>::ok_or"(T_ok, T_err, opt, err) {
         goto [l-nth(opt, 0i) = 1i] ok er;
     ok: ret := {{ 0i, l-nth(opt, 1i) }}; (* Ok res; *)
         return;
     er: ret := {{ 1i, {{ v }} }}; (* Err v; *)
         return
};

proc "std::boxed::Box::<T>::from_raw"(T, ptr) {
     global := {{}};
     non_null := {{ ptr }};
     phantom_data := {{}};
     unique := {{ non_null, phantom_data }};
     box := {{ unique, global }};
     ret := box;
     return
};

proc "core::ptr::const_ptr::<impl *const T>::add"(T, p, i) {
    ret := {{ l-nth(p, 0i), l+ (l-nth(p, 1i), {{ {{ "+", false, i, T }} }}) }};
    return
};

proc "core::ptr::const_ptr::<impl *const T>::offset"(T, p, i) {
    ret := {{ l-nth(p, 0i), l+ (l-nth(p, 1i), {{ {{ "+", false, i, T }} }}) }};
    return
};

proc "std::ptr::null_mut"(T) {
     ret := {{ $l_null, {{ }} }};
     return
};

proc "std::ptr::Unique::<T>::dangling"(T) {
     ret := {{ {{ {{ $l_dangling, {{ }} }} }}, {{ }} }};
     return
};

proc "<T as std::mem::SizedTypeProperties>::IS_ZST"(T) {
     rep := [is_zst](T);
     ret := l-nth(rep, 0i);
     return
};

proc "std::mem::size_of"(T) {
     rep := [size_of](T);
     ret := l-nth(rep, 0i);
     return
};

proc "core::num::<impl usize>::unchecked_mul"(i, j) {
     ret := i i* j;
     (* assert(ret i<# ((1i << 64i) i- 1i));  we remove that assert for now because Creusot cannot specify correctly that invariant for vec. *)
     return
};

proc "std::alloc::Layout::from_size_align_unchecked"(size, align) {
     ret := {{ size, align }};
     return
};

proc "std::alloc::Layout::align"(lft, layout) {
     ret := l-nth(layout, 1i);
     return
};

proc "std::alloc::Layout::array"(T, n) {
     (* We don't handle alignment yet. Not because it's not possible, it works exactly like size.
        But because it requires "std::ptr::Unique::<T>::cast"more research into Rust's current rules regarding alignment that I know less of. *)
     (* We also simplify things: we could encode requirements on size proportionally to total allocable memory etc...
        However, we do not do so for now, because there again it is beside the point of what we are trying to show
        with this prototype. *)
          align := 1i;
          size := [size_of](T);
          size := l-nth(size, 0i);
          goto [(not (size = 0i)) and (((2i << 63i) i- align) i< n)] err ok;
     ok:  layout := "std::alloc::Layout::from_size_align_unchecked"(n i* size, align);
          ret := {{ 0i, {{ layout }} }};
          return;
     err: ret := {{ 1i, {{ {{ }} }} }};
          return
     (* This is the proper behaviour. That way, we could also check that passing something wrong would actually fail with the right behaviour *)
};

proc "std::alloc::Layout::size"(lft, layout) {
     reader_ptr := l-nth(layout, 0i);
     reader_proj := l+ (
          l-nth(layout, 1i),
          {{ {{ "f", 0i, {{ "adt", "Layout", {{  }} }} }} }});
     ret := [load_value](reader_ptr, reader_proj, "usize", true);
     return
};

proc "std::rt::begin_panic"(lft, ty, str) {
     fail[panicked](str)
};

proc "core::num::<impl usize>::BITS"() {
     ret := 64i;
     return
};

proc "std::alloc::Allocator::allocate"(lft, alloc_ty, alloc_ptr, layout) {
     size := l-nth(layout, 0i);
     u := i__lang_assert(not (size = 0i), "Allocate should not be called with a zero-sized allocation");
     ptr := [alloc]({{ "array", "u8", size }});
     (* The following corresponds to Ok(NonNull::slice_from_raw_parts(ptr, size)) *)
     ret := {{ 0i, {{ 
          {{ {{ ptr, size }} }}
     }} }};
     return
};

proc "i__alloc_maybe_zero"(layout) {
         goto [l-nth(layout, 0i) = 0i] z nz;
     z:  ret := {{ 0i, {{ 
               {{ {{ {{ $l_dangling, {{ }} }}, size }} }}
         }} }};
         return;
     nz: ret := "std::alloc::Allocator::allocate"(null, null, null, layout);
         return
};

proc "std::alloc::Allocator::grow"(lft, alloc_ty, alloc_ptr, ptr, old_layout, new_layout) {
          old_size := l-nth(old_layout, 0i);
          new_size := l-nth(new_layout, 0i);
          old_align := l-nth(old_layout, 1i);
          new_align := l-nth(new_layout, 1i);
          assert(old_size i<=# new_size); (* This is an actual SAFETY pre-condition to the grow function *)
          goto [ old_size = 0i ] z nz;
     z:   ret := "i__alloc_maybe_zero"(new_layout);
          return;
     nz:  new_ptr := "std::alloc::Allocator::allocate"(null, null, null, new_layout);
          
          (* unwrap result |> NonNull::<[T]>as_mut_ptr() *)
          new_ptr := l-nth(l-nth(l-nth(l-nth(new_ptr, 1i), 0i), 0i), 0i);
          ptr := l-nth(ptr, 0i); (* NonNull::as_ptr() *)
          (* We copy the old data into the new data *)
          u := [copy_nonoverlapping](l-nth(ptr, 0i), l-nth(ptr, 1i), l-nth(new_ptr, 0i), l-nth(new_ptr, 1i), "u8", old_size);
          u := [free](l-nth(ptr, 0i), l-nth(ptr, 1i), {{ "array", "u8", old_size }}); (* We free the old data *)
          ret := {{ 0i, {{ 
               {{ {{ new_ptr, new_size }} }}
          }} }};
          return
};

proc "std::ptr::NonNull::<T>::cast"(old_ty, new_ty, nn) {
            old_is_unsized := "i__ty_is_unsized"(old_ty);
            new_is_unsized := "i__ty_is_unsized"(new_ty);
            goto [old_is_unsized] ou os;
     ou:    goto [new_is_unsized] ounu ouns;
     ounu:  (* Old is unsized and new is unsized *)
            fat_ptr := l-nth(nn, 0i);
            ptr := l-nth(fat_ptr, 0i);
            size := l-nth(fat_ptr, 1i);
            fail[CAST]("TODO: Resize fat pointer");
            ret := {{ {{ ptr, size }} }};
            return;
     ouns: (* Old is unsized and new is sized, we just get rid of the size in addition to casting.
              The casting is from inner to inner *)
           ptr := l-nth(l-nth(nn, 0i), 0i);
           ret := {{ ptr }};
           return;
     os:   goto [new_is_unsized] osnu osns;
     osnu: (* Old is sized and new is unsized: impossible, cannot get size! *)
           fail[CAST]("cannot cast from sized to unsized");
     osns: (* Old is sized and new is sized, there's nothing to do *)
           ret := nn;
           return
};

proc "std::ptr::Unique::<T>::cast"(old_ty, new_ty, unique) {
     nn := l-nth(unique, 0i);
     nn := "std::ptr::NonNull::<T>::cast"(old_ty, new_ty, nn);
     ret := {{ nn, {{ }} }};
     return
};

proc "std::ptr::Unique::<T>::new_unchecked"(T, ptr) {
     ret := {{ {{ ptr }},  {{ }} }};
     return
};

proc "std::ptr::Unique::<T>::as_ptr"(T, ptr) {
     ret := "std::ptr::NonNull::<T>::as_ptr"(T, l-nth(ptr, 0i));
     return
};

proc "<std::ptr::Unique<T> as std::convert::Into<std::ptr::NonNull<T>>>::into"(T1, T2, ptr) {
     ret := l-nth(ptr, 0i);
     return
};

proc "core::num::<impl usize>::checked_add"(i, j) {
     res_and_overflow := "i__binop_checked_add"(i, j, (1i << 64i) i- 1i);
     goto [l-nth(res_and_overflow, 1i)] ov ok;
     ov: ret := {{ 0i, {{ }} }}; (* None *)
         return;
     ok: ret := {{ 1i, {{ l-nth(res_and_overflow, 0i) }} }}; (* Some res *)
         return
};

proc "std::cmp::max"(T, i, j) {
     goto [i i> j] ok ko;
     ok: ret := i;
         return;
     ko: ret := j;
         return
};

proc "std::ptr::mut_ptr::<impl *mut T>::add"(T, ptr, ofs) {
     ret := {{ l-nth(ptr, 0i), l+ (l-nth(ptr, 1i), {{ {{ "+", false, ofs, T }} }}) }};
     return
};

proc "core::num::<impl usize>::MAX"() {
     ret := (1i << 64i) i- 1i;
     return
};

proc "std::ptr::write"(T, dest, value) {
     u := [store_value](l-nth(dest, 0i), l-nth(dest, 1i), T, value);
     ret := {{}};
     return
};

(* PREDS *)

pred "std::ptr::NonNull::<T>::as_ptr"(+T, +nn, out):
     out == l-nth(nn, 0i);
     
pred "std::ptr::Unique::<T>::as_ptr"(+T, +ptr, out):
     "std::ptr::NonNull::<T>::as_ptr"(T, l-nth(ptr, 0i), out);
     
pred "std::ptr::mut_ptr::<impl *mut T>::offset"(+T, +ptr, +ofs, out):
     out == {{ l-nth(ptr, 0i), l+ (l-nth(ptr, 1i), {{ {{ "+", false, ofs, T }} }}) }};
     
pred "std::ptr::mut_ptr::<impl *mut T>::add"(+T, +ptr, +ofs, out):
     out == {{ l-nth(ptr, 0i), l+ (l-nth(ptr, 1i), {{ {{ "+", false, ofs, T }} }}) }};
     
pred "std::mem::size_of"(+T, out):
     <ty_size>(T; out);