(* PROCS *)

proc "core::slice::<impl [T]>::len"(T, p) { (* First param is ignored *)
       goto [(typeOf l-nth(p, 0i)) = List] ctn err;
  ctn: ret := l-nth(p, 1i);
       return;
  err: fail[PTRREPR]("should be a fat pointer", p)
};

proc "core::ptr::slice_from_raw_parts"(T, p, l) {
     ret := {{ p, l }};
     return
};

proc "std::ptr::NonNull::<T>::as_ptr"(T, p) {
     ret := l-nth(p, 0i);
     return
};

proc "std::ptr::NonNull::<T>::as_mut"(T, p) {
        r := [load_value](l-nth(p, 0i), l-nth(p, 1i), {{ "adt", "NonNull", {{ T }} }}, true);
        ret := l-nth(l-nth(r, 0i), 0i);
        return
};

proc "std::boxed::Box::<T>::new"(T, v) {
     global := {{}};
     ptr := [alloc](T);
     u := [store_value](l-nth(ptr, 0i), l-nth(ptr, 1i), T, v);
     non_null := {{ ptr }};
     phantom_data := {{}};
     unique := {{ non_null, phantom_data }};
     box := {{ unique, global }};
     ret := box;
     return
};

proc "std::option::Option::<T>::as_mut"(T, p) {
         discr := [load_discr](l-nth(p, 0i), l-nth(p, 1i), {{ "adt", "Option", {{ T }} }});
         discr := l-nth(discr, 0i);
         goto [discr = 0i] nn ot;
     nn: ret := {{ 0i, {{ }} }};
         return;
     ot: goto [discr = 1i] sm er;
     sm: ref := {{
               l-nth(p, 0i),
               l+ (
                    l-nth(p, 1i),
                    {{ {{ "vf", 0i, {{ "adt", "Option", {{ T }} }}, 1i }} }}
               )
          }};
          ret := {{ 1i, {{ ref }} }};
         return;
     er: fail[TYPERR]("Invalid discr")
};

proc "std::boxed::Box::<T>::from_raw"(T, ptr) {
     global := {{}};
     non_null := {{ ptr }};
     phantom_data := {{}};
     unique := {{ non_null, phantom_data }};
     box := {{ unique, global }};
     ret := box;
     return
};

proc "core::ptr::const_ptr::<impl *const T>::add"(T, p, i) {
    ret := {{ l-nth(p, 0i), l+ (l-nth(p, 1i), {{ {{ "+", false, i, T }} }}) }};
    return
};

proc "core::ptr::const_ptr::<impl *const T>::offset"(T, p, i) {
    ret := {{ l-nth(p, 0i), l+ (l-nth(p, 1i), {{ {{ "+", false, i, T }} }}) }};
    return
};

proc "std::ptr::null_mut"(T) {
     ret := {{ $l_null, {{ }} }};
     return
};

(* PREDS *)

pred "std::ptr::NonNull::<T>::as_ptr"(+T, +nn, out):
     out == l-nth(nn, 0i);