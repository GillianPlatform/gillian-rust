#begin_init_data
{
  "Node": [
    "Struct",
    "ReprRust",
    [
      [ "next", [ "Adt", "Option" ] ],
      [ "prev", [ "Adt", "Option" ] ],
      [ "element", [ "Scalar", "u32" ] ]
    ]
  ],
  "Option": [
    "Enum", [ [ "None", [] ], [ "Some", [ [ "Adt", "NonNull" ] ] ] ]
  ],
  "Box": [
    "Struct",
    "ReprRust",
    [ [ "0", [ "Adt", "Unique" ] ], [ "1", [ "Adt", "Global" ] ] ]
  ],
  "Global": [ "Struct", "ReprRust", [] ],
  "PhantomData": [ "Struct", "ReprRust", [] ],
  "LinkedList": [
    "Struct",
    "ReprRust",
    [
      [ "head", [ "Adt", "Option" ] ],
      [ "tail", [ "Adt", "Option" ] ],
      [ "len", [ "Scalar", "usize" ] ],
      [ "marker", [ "Adt", "PhantomData" ] ]
    ]
  ],
  "NonNull": [
    "Struct",
    "ReprRust",
    [ [ "pointer", [ "Ref", { "mut": false, "ty": [ "Adt", "Node" ] } ] ] ]
  ],
  "Unique": [
    "Struct",
    "ReprRust",
    [
      [ "pointer", [ "Adt", "NonNull" ] ],
      [ "_marker", [ "Adt", "PhantomData" ] ]
    ]
  ]
}
#end_init_data
import "i__binop.gil", "i__lang.gil", "i__std_shims.gil";

spec "LinkedList::new"()
      [[ emp ]]
      [[ (ret == {{
            "LinkedList",
            {{ 
              {{ "Option", {{ 0i, {{  }} }} }},
              {{ "Option", {{ 0i, {{  }} }} }},
              0i,
              {{ "PhantomData", {{  }} }}
            }}
      }}) ]]
      normal

proc "LinkedList::new"() {
  bb0:  m_1 := {{ "Option", {{ 0i, {{  }} }} }};
        m_2 := {{ "Option", {{ 0i, {{  }} }} }};
        m_3 := {{ "PhantomData", {{  }} }};
        g_0 := m_1;
        m_1 := none;
        g_1 := m_2;
        m_2 := none;
        g_2 := m_3;
        m_3 := none;
        m_0 := {{ "LinkedList", {{ g_0, g_1, 0i, g_2 }} }};
        g_3 := m_0;
        m_0 := none;
        ret := g_3;
        goto rlab;
  rlab: return
};


spec "Node::new"(m_1element)
      [[ (m_1element == #m_1elment) ]]
      [[ (ret == {{
            "Node",
            {{ 
              {{ "Option", {{ 0i, {{  }} }} }},
              {{ "Option", {{ 0i, {{  }} }} }},
              #m_1element
            }}
      }}) ]]
      normal
proc "Node::new"(m_1element) {
  bb0:  m_2 := {{ "Option", {{ 0i, {{  }} }} }};
        m_3 := {{ "Option", {{ 0i, {{  }} }} }};
        m_4 := m_1element;
        g_0 := m_2;
        m_2 := none;
        g_1 := m_3;
        m_3 := none;
        g_2 := m_4;
        m_4 := none;
        m_0 := {{ "Node", {{ g_0, g_1, g_2 }} }};
        g_3 := m_0;
        m_0 := none;
        ret := g_3;
        goto rlab;
  rlab: return
};


proc "LinkedList::push_front"(m_1self, m_2elt) {
        g_0 := m_1self;
        m_1self := [alloc]({{ "ref", true, {{ "adt", "LinkedList" }} }});
        u := [store_value](l-nth(m_1self, 0i), l-nth(m_1self, 1i),
                               {{ "ref", true, {{ "adt", "LinkedList" }} }},
                               g_0);
  bb0:  g_2 := [load_value](l-nth(m_1self, 0i), l-nth(m_1self, 1i),
                                {{ "ref", true, {{ "adt", "LinkedList" }} }},
                                true);
        g_1 := l-nth(g_2, 0i);
        m_4 := g_1;
        m_7 := m_2elt;
        g_3 := m_7;
        m_7 := none;
        g_4 := "Node::new"(g_3);
        m_6 := g_4;
        goto bb1;
  bb1:  g_5 := m_6;
        m_6 := none;
        g_6 := "i__alloc_box_boxed_new"(g_5, {{ "adt", "Node" }});
        m_5 := g_6;
        goto bb2;
  bb2:  g_7 := m_4;
        m_4 := none;
        g_8 := m_5;
        m_5 := none;
        g_9 := "LinkedList::push_front_node"(g_7, g_8);
        m_3 := g_9;
        goto bb3;
  bb3:  m_0 := {{  }};
        g_10 := m_0;
        m_0 := none;
        ret := g_10;
        goto rlab;
  rlab: u := [free](l-nth(m_1self, 0i), l-nth(m_1self, 1i), {{ "ref",
                        true, {{ "adt", "LinkedList" }} }});
        return
};

pred dll_seg(+head, +tail_next, +tail, +head_prev, data):
      (head == tail_next) * (tail == head_prev) * (data == {{}}),
      (head  == {{
                  "Option",
                    {{ 1i,
                      {{
                        {{ "NonNull", {{ {{ #hloc, {{ }} }} }} }}
                      }}
                    }}
                }}) *
      types(#hloc: Obj) *
      (<value>(#hloc, {{}}, {{ "adt", "Node" }}; {{ "Node", {{ #head_next, #head_prev, #element }} }})) *
      dll_seg(#head_next, tail_next, tail, head, #rest) *
      (data == l+({{ #element }}, #rest));

pred dll(+linked_list, data):
      (linked_list == {{ #loc, {{ }} }}) * types(#loc: Obj) *
      <value>(#loc, {{}}, {{ "adt", "LinkedList" }}; {{ "LinkedList", {{ #head, #tail, #len, {{ "PhantomData", {{ }} }} }} }}) *
      (#len == l-len(data)) * dll_seg(#head, {{ "Option", {{ 0i, {{ }} }} }}, #tail, {{ "Option", {{ 0i, {{ }} }} }}, data);

pred box_new_node(+box, element: Int):
      (box ==
      {{ "Box",
         {{ {{ "Unique", {{ {{ "NonNull", {{ #ref }} }},
         {{ "PhantomData", {{  }} }} }} }},
         {{ "Global",{{  }} }} }} }}) *
      (#ref == {{ #l, {{}} }}) *
      types(#l: Obj) *
      <value>(#l, {{}}, {{ "adt", "Node" }};
            {{ "Node", {{
                  {{ "Option", {{ 0i, {{  }} }} }},
                  {{ "Option", {{ 0i, {{  }} }} }},
                  element
              }}
            }});

spec "LinkedList::push_front_node"(m_1self, m_2node)
      [[
          (m_1self == #self) * (m_2node == #node) *
          dll(#self, #data) * box_new_node(#node, #element)
      ]]
      [[
          dll(#self, l+({{ #element }}, #data))
      ]]
      normal

proc "LinkedList::push_front_node"(m_1self, m_2node) {
        g_0 := m_1self;
        m_1self := [alloc]({{ "ref", true, {{ "adt", "LinkedList" }} }});
        u := [store_value](l-nth(m_1self, 0i), l-nth(m_1self, 1i),
                               {{ "ref", true, {{ "adt", "LinkedList" }} }},
                               g_0);
        g_1 := m_2node;
        m_2node := [alloc]({{ "adt", "Box" }});
        u := [store_value](l-nth(m_2node, 0i), l-nth(m_2node, 1i),
                               {{ "adt", "Box" }}, g_1);
        m_8 := [alloc]({{ "ref", true, {{ "adt", "Node" }} }});
        m_15 := [alloc]({{ "ref", true, {{ "adt", "Node" }} }});
        m_18 := [alloc]({{ "tuple", {{ "usize", "bool" }} }});
  bb0:  g_3 := [load_value](l-nth(m_1self, 0i), l-nth(m_1self, 1i),
                                {{ "ref", true, {{ "adt", "LinkedList" }} }},
                                true);
        g_2 := l-nth(g_3, 0i);
        g_5 := [load_value](l-nth(g_2, 0i),
                                l+ (l-nth(g_2, 1i), {{ {{ "f", 0i, {{ "adt",
                                    "LinkedList" }} }} }}),
                                {{ "adt", "Option" }}, true);
        g_4 := l-nth(g_5, 0i);
        m_3 := g_4;
        g_6 := m_3;
        m_3 := none;
        g_8 := [load_value](l-nth(m_2node, 0i), l-nth(m_2node, 1i),
                                {{ "adt", "Box" }}, true);
        g_7 := l-nth(g_8, 0i);
        u := [store_value](l-nth(l-nth(l-nth(l-nth(l-nth(l-nth(l-nth(g_7, 1i), 0i), 1i), 0i), 1i), 0i), 0i),
                               l+ (l-nth(l-nth(l-nth(l-nth(l-nth(l-nth(l-nth(g_7, 1i), 0i), 1i), 0i), 1i), 0i), 1i),
                                   {{ {{ "f", 0i, {{ "adt", "Node" }} }} }}),
                               {{ "adt", "Option" }}, g_6);
        m_4 := {{ "Option", {{ 0i, {{  }} }} }};
        g_9 := m_4;
        m_4 := none;
        g_11 := [load_value](l-nth(m_2node, 0i), l-nth(m_2node, 1i),
                                 {{ "adt", "Box" }}, true);
        g_10 := l-nth(g_11, 0i);
        u := [store_value](l-nth(l-nth(l-nth(l-nth(l-nth(l-nth(l-nth(g_10, 1i), 0i), 1i), 0i), 1i), 0i), 0i),
                               l+ (l-nth(l-nth(l-nth(l-nth(l-nth(l-nth(l-nth(g_10, 1i), 0i), 1i), 0i), 1i), 0i), 1i),
                                   {{ {{ "f", 1i, {{ "adt", "Node" }} }} }}),
                               {{ "adt", "Option" }}, g_9);
        g_13 := [load_value](l-nth(m_2node, 0i), l-nth(m_2node, 1i),
                                 {{ "adt", "Box" }}, false);
        g_12 := l-nth(g_13, 0i);
        m_9 := g_12;
        g_14 := m_9;
        m_9 := none;
        g_15 := "i__alloc_box_leak"(g_14);
        u := [store_value](l-nth(m_8, 0i), l-nth(m_8, 1i), {{ "ref",
                               true, {{ "adt", "Node" }} }}, g_15);
        goto bb1;
  bb1:  g_17 := [load_value](l-nth(m_8, 0i), l-nth(m_8, 1i), {{ "ref",
                                 true, {{ "adt", "Node" }} }}, true);
        g_16 := l-nth(g_17, 0i);
        m_7 := g_16;
        g_18 := m_7;
        m_7 := none;
        g_19 := "<&mut Node as std::convert::Into<std::ptr::NonNull<Node>>>::into"(
  g_18);
        m_6 := g_19;
        goto bb2;
  bb2:  g_20 := m_6;
        m_6 := none;
        m_5node := {{ "Option", {{ 1i, {{ g_20 }} }} }};
        g_22 := [load_value](l-nth(m_1self, 0i), l-nth(m_1self, 1i),
                                 {{ "ref", true, {{ "adt",
                                 "LinkedList" }} }}, true);
        g_21 := l-nth(g_22, 0i);
        g_24 := [load_discr](l-nth(g_21, 0i),
                                 l+ (l-nth(g_21, 1i), {{ {{ "f", 0i,
                                     {{ "adt", "LinkedList" }} }} }}),
                                 {{ "adt", "Option" }});
        g_23 := l-nth(g_24, 0i);
        m_11 := g_23;
        g_25 := m_11;
        m_11 := none;
        goto [(g_25 = 0i)] bb3 sw0;
  sw0:  goto [(g_25 = 1i)] bb4 sw1;
  sw1:  goto bb5;
  bb3:  goto bb6;
  bb4:  g_27 := [load_value](l-nth(m_1self, 0i), l-nth(m_1self, 1i),
                                 {{ "ref", true, {{ "adt",
                                 "LinkedList" }} }}, true);
        g_26 := l-nth(g_27, 0i);
        g_29 := [load_value](l-nth(g_26, 0i),
                                 l+ (l-nth(g_26, 1i), {{ {{ "f", 0i,
                                     {{ "adt", "LinkedList" }} }}, {{ "d",
                                     1i, {{ "adt", "Option" }} }}, {{ "vf",
                                     0i, {{ "adt", "Option" }}, 1i }} }}),
                                 {{ "adt", "NonNull" }}, true);
        g_28 := l-nth(g_29, 0i);
        m_13head := g_28;
        m_14 := m_5node;
        m_16 := m_13head;
        g_30 := m_16;
        m_16 := none;
        g_31 := "i__nonnull_as_ptr"(g_30);
        u := [store_value](l-nth(m_15, 0i), l-nth(m_15, 1i), {{ "ref",
                               true, {{ "adt", "Node" }} }}, g_31);
        goto bb7;
  bb5:  fail [Unreachable]();
  bb6:  m_12 := m_5node;
        g_32 := m_12;
        m_12 := none;
        g_34 := [load_value](l-nth(m_1self, 0i), l-nth(m_1self, 1i),
                                 {{ "ref", true, {{ "adt",
                                 "LinkedList" }} }}, true);
        g_33 := l-nth(g_34, 0i);
        u := [store_value](l-nth(g_33, 0i),
                               l+ (l-nth(g_33, 1i), {{ {{ "f", 1i, {{ "adt",
                                   "LinkedList" }} }} }}),
                               {{ "adt", "Option" }}, g_32);
        m_10 := {{  }};
        goto bb8;
  bb7:  g_35 := m_14;
        m_14 := none;
        g_37 := [load_value](l-nth(m_15, 0i), l-nth(m_15, 1i), {{ "ref",
                                 true, {{ "adt", "Node" }} }}, true);
        g_36 := l-nth(g_37, 0i);
        u := [store_value](l-nth(g_36, 0i),
                               l+ (l-nth(g_36, 1i), {{ {{ "f", 1i, {{ "adt",
                                   "Node" }} }} }}),
                               {{ "adt", "Option" }}, g_35);
        m_10 := {{  }};
        goto bb8;
  bb8:  m_17 := m_5node;
        g_38 := m_17;
        m_17 := none;
        g_40 := [load_value](l-nth(m_1self, 0i), l-nth(m_1self, 1i),
                                 {{ "ref", true, {{ "adt",
                                 "LinkedList" }} }}, true);
        g_39 := l-nth(g_40, 0i);
        u := [store_value](l-nth(g_39, 0i),
                               l+ (l-nth(g_39, 1i), {{ {{ "f", 0i, {{ "adt",
                                   "LinkedList" }} }} }}),
                               {{ "adt", "Option" }}, g_38);
        g_42 := [load_value](l-nth(m_1self, 0i), l-nth(m_1self, 1i),
                                 {{ "ref", true, {{ "adt",
                                 "LinkedList" }} }}, true);
        g_41 := l-nth(g_42, 0i);
        g_44 := [load_value](l-nth(g_41, 0i),
                                 l+ (l-nth(g_41, 1i), {{ {{ "f", 2i,
                                     {{ "adt", "LinkedList" }} }} }}),
                                 "usize", true);
        g_43 := l-nth(g_44, 0i);
        g_45 := "i__binop_checked_add"(g_43, 1i, 18446744073709551615i);
        u := [store_value](l-nth(m_18, 0i), l-nth(m_18, 1i), {{ "tuple",
                               {{ "usize", "bool" }} }}, g_45);
        g_47 := [load_value](l-nth(m_18, 0i),
                                 l+ (l-nth(m_18, 1i), {{ {{ "f", 1i,
                                     {{ "tuple", {{ "usize",
                                     "bool" }} }} }} }}),
                                 "bool", false);
        g_46 := l-nth(g_47, 0i);
        g_48 := "i__bool_of_lang_int"(g_46);
        u := "i__lang_assert"((not g_48), "Ugly assert message for now");
        goto bb9;
  bb9:  g_50 := [load_value](l-nth(m_18, 0i),
                                 l+ (l-nth(m_18, 1i), {{ {{ "f", 0i,
                                     {{ "tuple", {{ "usize",
                                     "bool" }} }} }} }}),
                                 "usize", false);
        g_49 := l-nth(g_50, 0i);
        g_52 := [load_value](l-nth(m_1self, 0i), l-nth(m_1self, 1i),
                                 {{ "ref", true, {{ "adt",
                                 "LinkedList" }} }}, true);
        g_51 := l-nth(g_52, 0i);
        u := [store_value](l-nth(g_51, 0i),
                               l+ (l-nth(g_51, 1i), {{ {{ "f", 2i, {{ "adt",
                                   "LinkedList" }} }} }}),
                               "usize", g_49);
        m_0 := {{  }};
        goto bb10;
  bb10: g_53 := m_0;
        m_0 := none;
        ret := g_53;
        goto rlab;
  rlab: u := [free](l-nth(m_1self, 0i), l-nth(m_1self, 1i), {{ "ref",
                        true, {{ "adt", "LinkedList" }} }});
        u := [free](l-nth(m_2node, 0i), l-nth(m_2node, 1i), {{ "adt",
                        "Box" }});
        u := [free](l-nth(m_8, 0i), l-nth(m_8, 1i), {{ "ref", true,
                        {{ "adt", "Node" }} }});
        u := [free](l-nth(m_15, 0i), l-nth(m_15, 1i), {{ "ref", true,
                        {{ "adt", "Node" }} }});
        u := [free](l-nth(m_18, 0i), l-nth(m_18, 1i), {{ "tuple",
                        {{ "usize", "bool" }} }});
        return
};
