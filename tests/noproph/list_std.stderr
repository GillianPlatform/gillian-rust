warning: unused imports: `assert_bind`, `unfold`
 --> ../tests/noproph/list_std.rs:5:5
  |
5 |     assert_bind,
  |     ^^^^^^^^^^^
6 |     macros::{no_prophecies::with_freeze_lemma_for_mutref, *},
7 |     unfold, Ownable,
  |     ^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

[TIMESTAMP WARN  lib_rtg::metadata] could not read metadata for crate `"std"`: Os { code: 2, kind: NotFound, message: "No such file or directory" }
[TIMESTAMP WARN  lib_rtg::codegen::block] Not handling drop properly yet: _4
[TIMESTAMP WARN  lib_rtg::codegen::block] Not handling drop properly yet: _1
[TIMESTAMP WARN  lib_rtg::codegen::block] Not handling drop properly yet: _1
[TIMESTAMP WARN  lib_rtg::codegen::block] Not handling drop properly yet: _2
[TIMESTAMP WARN  lib_rtg::codegen::block] Not handling drop properly yet: _16
[TIMESTAMP WARN  lib_rtg::codegen::block] Not handling drop properly yet: _4
[TIMESTAMP WARN  lib_rtg::codegen::block] Not handling drop properly yet: _16
[TIMESTAMP WARN  lib_rtg::codegen::block] Not handling drop properly yet: _4
[TIMESTAMP WARN  lib_rtg::codegen::block] Not handling drop properly yet: _2
[TIMESTAMP WARN  lib_rtg::codegen::block] Not handling drop properly yet: _7
[TIMESTAMP WARN  lib_rtg::codegen::block] Not handling drop properly yet: _2
[TIMESTAMP WARN  lib_rtg::codegen::block] Not handling drop properly yet: _2
warning: unused variable: `list`
  --> ../tests/noproph/list_std.rs:63:29
   |
63 | fn extract_head<T: Ownable>(list: &mut LinkedList<T>) {}
   |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_list`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `next`
  --> ../tests/noproph/list_std.rs:96:5
   |
96 |     next: Option<NonNull<Node<T>>>,
   |     ^^^^ help: if this is intentional, prefix it with an underscore: `_next`

warning: unused variable: `x`
  --> ../tests/noproph/list_std.rs:95:5
   |
95 |     x: Option<NonNull<Node<T>>>,
   |     ^ help: if this is intentional, prefix it with an underscore: `_x`

warning: unused variable: `tail_next`
  --> ../tests/noproph/list_std.rs:97:5
   |
97 |     tail_next: Option<NonNull<Node<T>>>,
   |     ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_tail_next`

warning: unused variable: `tail`
  --> ../tests/noproph/list_std.rs:98:5
   |
98 |     tail: Option<NonNull<Node<T>>>,
   |     ^^^^ help: if this is intentional, prefix it with an underscore: `_tail`

warning: unused variable: `head`
   --> ../tests/noproph/list_std.rs:113:5
    |
113 |     head: Option<NonNull<Node<T>>>,
    |     ^^^^ help: if this is intentional, prefix it with an underscore: `_head`

warning: unused variable: `tail_next`
   --> ../tests/noproph/list_std.rs:114:5
    |
114 |     tail_next: Option<NonNull<Node<T>>>,
    |     ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_tail_next`

warning: unused variable: `tail`
   --> ../tests/noproph/list_std.rs:115:5
    |
115 |     tail: Option<NonNull<Node<T>>>,
    |     ^^^^ help: if this is intentional, prefix it with an underscore: `_tail`

warning: unused variable: `head_prev`
   --> ../tests/noproph/list_std.rs:116:5
    |
116 |     head_prev: Option<NonNull<Node<T>>>,
    |     ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_head_prev`

warning: unused variable: `head`
   --> ../tests/noproph/list_std.rs:131:5
    |
131 |     head: Option<NonNull<Node<T>>>,
    |     ^^^^ help: if this is intentional, prefix it with an underscore: `_head`

warning: unused variable: `tail_next`
   --> ../tests/noproph/list_std.rs:132:5
    |
132 |     tail_next: Option<NonNull<Node<T>>>,
    |     ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_tail_next`

warning: unused variable: `tail`
   --> ../tests/noproph/list_std.rs:133:5
    |
133 |     tail: Option<NonNull<Node<T>>>,
    |     ^^^^ help: if this is intentional, prefix it with an underscore: `_tail`

warning: unused variable: `head_prev`
   --> ../tests/noproph/list_std.rs:134:5
    |
134 |     head_prev: Option<NonNull<Node<T>>>,
    |     ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_head_prev`

warning: variable `REFERENCE` should have a snake case name
   --> ../tests/noproph/list_std.rs:140:12
    |
140 |     fn own(self) {
    |            ^^^^ help: convert the identifier to snake case: `reference`
    |
    = note: `#[warn(non_snake_case)]` on by default

warning: 15 warnings emitted

[TIMESTAMP DEBUG rust_to_gil] Correct!
