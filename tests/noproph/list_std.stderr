warning: unused import: `unfold`
 --> ../tests/noproph/list_std.rs:4:26
  |
4 | use gilogic::{macros::*, unfold, Ownable};
  |                          ^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

[TIMESTAMP WARN  lib_rtg::metadata] could not read metadata for crate `"std"`: Os { code: 2, kind: NotFound, message: "No such file or directory" }
[TIMESTAMP WARN  lib_rtg::codegen::block] Not handling drop properly yet: _4
[TIMESTAMP WARN  lib_rtg::codegen::block] Not handling drop properly yet: _1
[TIMESTAMP WARN  lib_rtg::codegen::block] Not handling drop properly yet: _1
[TIMESTAMP WARN  lib_rtg::codegen::block] Not handling drop properly yet: _2
[TIMESTAMP WARN  lib_rtg::codegen::block] Not handling drop properly yet: _16
[TIMESTAMP WARN  lib_rtg::codegen::block] Not handling drop properly yet: _4
[TIMESTAMP WARN  lib_rtg::codegen::block] Not handling drop properly yet: _16
[TIMESTAMP WARN  lib_rtg::codegen::block] Not handling drop properly yet: _4
[TIMESTAMP WARN  lib_rtg::codegen::block] Not handling drop properly yet: _2
[TIMESTAMP WARN  lib_rtg::codegen::block] Not handling drop properly yet: _7
[TIMESTAMP WARN  lib_rtg::codegen::block] Not handling drop properly yet: _2
[TIMESTAMP WARN  lib_rtg::codegen::block] Not handling drop properly yet: _2
warning: unused variable: `list`
  --> ../tests/noproph/list_std.rs:59:29
   |
59 | fn extract_head<T: Ownable>(list: &mut LinkedList<T>) {}
   |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_list`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `next`
  --> ../tests/noproph/list_std.rs:92:5
   |
92 |     next: Option<NonNull<Node<T>>>,
   |     ^^^^ help: if this is intentional, prefix it with an underscore: `_next`

warning: function `extract_head___proof` should have a snake case name
  --> ../tests/noproph/list_std.rs:59:4
   |
59 | fn extract_head<T: Ownable>(list: &mut LinkedList<T>) {}
   |    ^^^^^^^^^^^^ help: convert the identifier to snake case: `extract_head_proof`
   |
   = note: `#[warn(non_snake_case)]` on by default

warning: variable `THIS` should have a snake case name
   --> ../tests/noproph/list_std.rs:136:12
    |
136 |     fn own(self) {
    |            ^^^^ help: convert the identifier to snake case: `this`

warning: 5 warnings emitted

[TIMESTAMP DEBUG rust_to_gil] Correct!
