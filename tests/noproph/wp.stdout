#begin_init_data
{"N":["Struct","ReprRust",[["v",["Param",0]],["o",["Ptr",{"mut":true,"ty":["Adt",["N",[["Param",0]]]]}]]]],"WP":["Struct","ReprRust",[["x",["Ptr",{"mut":true,"ty":["Adt",["N",[["Param",0]]]]}]],["y",["Ptr",{"mut":true,"ty":["Adt",["N",[["Param",0]]]]}]]]]}
#end_init_data

import "i__binop.gil", "i__lang.gil", "i__std_shims.gil", "i__prophecies.gil", "i__ownable.gil", "i__std_shims_no_pcy.gil";

pred "wp::<T>"(+pty_T0, +wp, x, y):
(#wp == {{ #x, #y }}) * <value>(l-nth(#x, 0i), l-nth(#x, 1i), {{ "adt", "N", {{ pty_T0 }} }}; {{ #v_x, #y }}) * <value>(l-nth(#y, 0i), l-nth(#y, 1i), {{ "adt", "N", {{ pty_T0 }} }}; {{ #v_y, #x }}) * "<T as gilogic::Ownable>::own"(pty_T0, #v_x) * "<T as gilogic::Ownable>::own"(pty_T0, #v_y) * types(#lvar_0: Obj, #lvar_1: List) * (#x == {{ #lvar_0, #lvar_1 }}) * types(#lvar_2: Obj, #lvar_3: List) * (#y == {{ #lvar_2, #lvar_3 }}) * (y == #y) * (x == #x) * (wp == #wp);


pred "extract_y::<T>$$extract_proof$$pre"(+pty_T0, +p, x, y):
"wp_ref_mut_xy::<T>$$inner"(pty_T0, p, #x, #y) * (p == #p) * (x == #x) * (y == #y) * types(#lvar_0: Obj, #lvar_1: List) * (#p == {{ #lvar_0, #lvar_1 }}) * types(#lvar_2: Obj, #lvar_3: List) * (#x == {{ #lvar_2, #lvar_3 }}) * types(#lvar_4: Obj, #lvar_5: List) * (#y == {{ #lvar_4, #lvar_5 }});


pred "extract_y::<T>$$extract_proof$$post"(+pty_T0, +p, +x, +y):
(pty_T0 == #pty_T0) * (p == #p) * (x == #x) * (y == #y) * types(#lvar_6: Obj, #lvar_7: List) * (#p == {{ #lvar_6, #lvar_7 }}) * types(#lvar_8: Obj, #lvar_9: List) * (#x == {{ #lvar_8, #lvar_9 }}) * types(#lvar_10: Obj, #lvar_11: List) * (#y == {{ #lvar_10, #lvar_11 }}) * "<&mut T as gilogic::Ownable>::own$$inner"(pty_T0, {{ l-nth(#y, 0i), l+ (l-nth(#y, 1i), {{ {{ "f", 0i, {{ "adt", "N", {{ pty_T0 }} }} }} }}) }});


pred "extract_x::<T>$$extract_proof$$pre"(+pty_T0, +p, x, y):
"wp_ref_mut_xy::<T>$$inner"(pty_T0, p, #x, #y) * (p == #p) * (x == #x) * (y == #y) * types(#lvar_0: Obj, #lvar_1: List) * (#p == {{ #lvar_0, #lvar_1 }}) * types(#lvar_2: Obj, #lvar_3: List) * (#x == {{ #lvar_2, #lvar_3 }}) * types(#lvar_4: Obj, #lvar_5: List) * (#y == {{ #lvar_4, #lvar_5 }});


pred "extract_x::<T>$$extract_proof$$post"(+pty_T0, +p, +x, +y):
(pty_T0 == #pty_T0) * (p == #p) * (x == #x) * (y == #y) * types(#lvar_6: Obj, #lvar_7: List) * (#p == {{ #lvar_6, #lvar_7 }}) * types(#lvar_8: Obj, #lvar_9: List) * (#x == {{ #lvar_8, #lvar_9 }}) * types(#lvar_10: Obj, #lvar_11: List) * (#y == {{ #lvar_10, #lvar_11 }}) * "<&mut T as gilogic::Ownable>::own$$inner"(pty_T0, {{ l-nth(#x, 0i), l+ (l-nth(#x, 1i), {{ {{ "f", 0i, {{ "adt", "N", {{ pty_T0 }} }} }} }}) }});


pred "wp_ref_mut_xy::<T>"(+pLft_a, +pty_T0, +REFERENCE, x, y):
"wp::<T>"(pty_T0, #SELF, #x, #y) * <value>(l-nth(#REFERENCE, 0i), l-nth(#REFERENCE, 1i), {{ "adt", "WP", {{ pty_T0 }} }}; #SELF) * types(#lvar_4: Obj, #lvar_5: List) * (#REFERENCE == {{ #lvar_4, #lvar_5 }}) * types(#lvar_6: Obj, #lvar_7: List) * (#x == {{ #lvar_6, #lvar_7 }}) * types(#lvar_8: Obj, #lvar_9: List) * (#y == {{ #lvar_8, #lvar_9 }}) * (y == #y) * (x == #x) * (REFERENCE == #REFERENCE);
guard: <lft>(pLft_a; true);


pred "<WP<T> as gilogic::Ownable>::own"(+pty_T0, +self):
"wp::<T>"(pty_T0, #self, #x, #y) * (self == #self);


abstract pred "<T as gilogic::Ownable>::own"(+pty_Self0, +self);


pred "<&mut T as gilogic::Ownable>::own"(+lft, +pty_T0, +self: List):
<value>(l-nth(self, 0i), l-nth(self, 1i), pty_T0; #v) * "<T as gilogic::Ownable>::own"(pty_T0, #v);
guard: <lft>(lft; true);


pred "<&mut WP<T> as gilogic::Ownable>::own"(+lft, +pty_T0, +self: List):
<value>(l-nth(self, 0i), l-nth(self, 1i), {{ "adt", "WP", {{ pty_T0 }} }}; #v) * "<WP<T> as gilogic::Ownable>::own"(pty_T0, #v);
guard: <lft>(lft; true);


pred "wp_ref_mut_xy::<T>$$inner"(+pty_T0, +REFERENCE, x, y):
"wp::<T>"(pty_T0, #SELF, #x, #y) * <value>(l-nth(#REFERENCE, 0i), l-nth(#REFERENCE, 1i), {{ "adt", "WP", {{ pty_T0 }} }}; #SELF) * types(#lvar_4: Obj, #lvar_5: List) * (#REFERENCE == {{ #lvar_4, #lvar_5 }}) * types(#lvar_6: Obj, #lvar_7: List) * (#x == {{ #lvar_6, #lvar_7 }}) * types(#lvar_8: Obj, #lvar_9: List) * (#y == {{ #lvar_8, #lvar_9 }}) * (y == #y) * (x == #x) * (REFERENCE == #REFERENCE);


pred "<&mut T as gilogic::Ownable>::own$$inner"(+pty_T0, +self: List):
<value>(l-nth(self, 0i), l-nth(self, 1i), pty_T0; #v) * "<T as gilogic::Ownable>::own"(pty_T0, #v);


pred "<&mut WP<T> as gilogic::Ownable>::own$$inner"(+pty_T0, +self: List):
<value>(l-nth(self, 0i), l-nth(self, 1i), {{ "adt", "WP", {{ pty_T0 }} }}; #v) * "<WP<T> as gilogic::Ownable>::own"(pty_T0, #v);


lemma "extract_y::<T>$$extract_proof"(pty_T0, p)[[ "extract_y::<T>$$extract_proof$$pre"(#pty_T0, #p, #x, #y) ]]
[["extract_y::<T>$$extract_proof$$post"(#pty_T0, #p, #x, #y) * ("extract_y::<T>$$extract_proof$$post"(#pty_T0, #p, #x, #y) -* "extract_y::<T>$$extract_proof$$pre"(#pty_T0, #p, #x, #y))]]

[*
package ("extract_y::<T>$$extract_proof$$post"(#pty_T0, #p, #x, #y) -* "extract_y::<T>$$extract_proof$$pre"(#pty_T0, #p, #x, #y))
*]


lemma "extract_y::<T>"(pLft_a, pty_T0, p)[[ "wp_ref_mut_xy::<T>"(#pLft_a, #pty_T0, #p, #x, #y) * <lft>(#pLft_a; true) * types(#lvar_4: Obj, #lvar_5: List) * (#y == {{ #lvar_4, #lvar_5 }}) * types(#lvar_2: Obj, #lvar_3: List) * (#x == {{ #lvar_2, #lvar_3 }}) * types(#lvar_0: Obj, #lvar_1: List) * (#p == {{ #lvar_0, #lvar_1 }}) * (y == #y) * (x == #x) * (p == #p) * (pty_T0 == #pty_T0) * (pLft_a == #pLft_a) ]]
[["<&mut T as gilogic::Ownable>::own"(#pLft_a, #pty_T0, {{ l-nth(#y, 0i), l+ (l-nth(#y, 1i), {{ {{ "f", 0i, {{ "adt", "N", {{ #pty_T0 }} }} }} }}) }}) * <lft>(#pLft_a; true)]]


lemma "extract_x::<T>$$extract_proof"(pty_T0, p)[[ "extract_x::<T>$$extract_proof$$pre"(#pty_T0, #p, #x, #y) ]]
[["extract_x::<T>$$extract_proof$$post"(#pty_T0, #p, #x, #y) * ("extract_x::<T>$$extract_proof$$post"(#pty_T0, #p, #x, #y) -* "extract_x::<T>$$extract_proof$$pre"(#pty_T0, #p, #x, #y))]]

[*
package ("extract_x::<T>$$extract_proof$$post"(#pty_T0, #p, #x, #y) -* "extract_x::<T>$$extract_proof$$pre"(#pty_T0, #p, #x, #y))
*]


lemma "extract_x::<T>"(pLft_a, pty_T0, p)[[ "wp_ref_mut_xy::<T>"(#pLft_a, #pty_T0, #p, #x, #y) * <lft>(#pLft_a; true) * types(#lvar_4: Obj, #lvar_5: List) * (#y == {{ #lvar_4, #lvar_5 }}) * types(#lvar_2: Obj, #lvar_3: List) * (#x == {{ #lvar_2, #lvar_3 }}) * types(#lvar_0: Obj, #lvar_1: List) * (#p == {{ #lvar_0, #lvar_1 }}) * (y == #y) * (x == #x) * (p == #p) * (pty_T0 == #pty_T0) * (pLft_a == #pLft_a) ]]
[["<&mut T as gilogic::Ownable>::own"(#pLft_a, #pty_T0, {{ l-nth(#x, 0i), l+ (l-nth(#x, 1i), {{ {{ "f", 0i, {{ "adt", "N", {{ #pty_T0 }} }} }} }}) }}) * <lft>(#pLft_a; true)]]


lemma "freeze_xy::<T>"(pLft_a, pty_T0, REFERENCE)[[ "<&mut WP<T> as gilogic::Ownable>::own"(#pLft_a, #pty_T0, #REFERENCE) * <lft>(#pLft_a; true) * types(#lvar_0: Obj, #lvar_1: List) * (#REFERENCE == {{ #lvar_0, #lvar_1 }}) * (REFERENCE == #REFERENCE) * (pty_T0 == #pty_T0) * (pLft_a == #pLft_a) ]]
[["wp_ref_mut_xy::<T>"(#pLft_a, #pty_T0, #REFERENCE, #x, #y) * <lft>(#pLft_a; true)]]


spec "WP::<T>::assign_first"(pLft_a, pty_T0, m_1self, m_2x)
[[ "<&mut WP<T> as gilogic::Ownable>::own"(#pLft_a, #pty_T0, #m_1self) * "<T as gilogic::Ownable>::own"(#pty_T0, #m_2x) * <lft>(#pLft_a; true) * types(#lvar_0: Obj, #lvar_1: List) * (#m_1self == {{ #lvar_0, #lvar_1 }}) * (m_2x == #m_2x) * (m_1self == #m_1self) * (pty_T0 == #pty_T0) * (pLft_a == #pLft_a) ]]
[["<() as gilogic::Ownable>::own"(ret) * <lft>(#pLft_a; true)]]
normal

proc "WP::<T>::assign_first"(pLft_a, pty_T0, m_1self, m_2x) {
        g_0 := m_1self;
        m_1self := [alloc]({{ "ref", true, {{ "adt", "WP", {{ pty_T0 }} }} }});
        u := [store_value](l-nth(m_1self, 0i), l-nth(m_1self, 1i), {{ "ref", true, {{ "adt", "WP", {{ pty_T0 }} }} }}, g_0);
  bb0:  g_1 := m_2x;
        m_3 := g_1;
        goto bb1;
  bb1:  g_2 := m_3;
        g_4 := [load_value](l-nth(m_1self, 0i), l-nth(m_1self, 1i), {{ "ref", true, {{ "adt", "WP", {{ pty_T0 }} }} }}, true);
        g_3 := l-nth(g_4, 0i);
        g_6 := [load_value](l-nth(g_3, 0i), l+ (l-nth(g_3, 1i), {{ {{ "f", 0i, {{ "adt", "WP", {{ pty_T0 }} }} }} }}), {{ "ptr", true, {{ "adt", "N", {{ pty_T0 }} }} }}, true);
        g_5 := l-nth(g_6, 0i);
        u := [store_value](l-nth(g_5, 0i), l+ (l-nth(g_5, 1i), {{ {{ "f", 0i, {{ "adt", "N", {{ pty_T0 }} }} }} }}), pty_T0, g_2);
        goto bb3;
  bb3:  m_0 := {{  }};
        goto bb4;
  bb4:  g_7 := m_0;
        ret := g_7;
        goto rlab;
  rlab: u := [free](l-nth(m_1self, 0i), l-nth(m_1self, 1i), {{ "ref", true, {{ "adt", "WP", {{ pty_T0 }} }} }});
        return
};

spec "WP::<T>::first_mut"(pLft_a, pty_T0, m_1self)
[[ "<&mut WP<T> as gilogic::Ownable>::own"(#pLft_a, #pty_T0, #m_1self) * <lft>(#pLft_a; true) * types(#lvar_0: Obj, #lvar_1: List) * (#m_1self == {{ #lvar_0, #lvar_1 }}) * (m_1self == #m_1self) * (pty_T0 == #pty_T0) * (pLft_a == #pLft_a) ]]
[["<&mut T as gilogic::Ownable>::own"(#pLft_a, #pty_T0, ret) * <lft>(#pLft_a; true)]]
normal

proc "WP::<T>::first_mut"(pLft_a, pty_T0, m_1self) {
        g_0 := m_1self;
        m_1self := [alloc]({{ "ref", true, {{ "adt", "WP", {{ pty_T0 }} }} }});
        u := [store_value](l-nth(m_1self, 0i), l-nth(m_1self, 1i), {{ "ref", true, {{ "adt", "WP", {{ pty_T0 }} }} }}, g_0);
        m_2 := [alloc]({{ "ref", true, pty_T0 }});
        m_3 := [alloc]({{ "ref", true, pty_T0 }});
        m_6ret := [alloc]({{ "ref", true, pty_T0 }});
  bb0:  g_2 := [load_value](l-nth(m_1self, 0i), l-nth(m_1self, 1i), {{ "ref", true, {{ "adt", "WP", {{ pty_T0 }} }} }}, true);
        g_1 := l-nth(g_2, 0i);
        m_5 := g_1;
        g_3 := m_5;
        apply "freeze_xy::<T>"(pLft_a,pty_T0,g_3);
        goto bb1;
  bb1:  g_5 := [load_value](l-nth(m_1self, 0i), l-nth(m_1self, 1i), {{ "ref", true, {{ "adt", "WP", {{ pty_T0 }} }} }}, true);
        g_4 := l-nth(g_5, 0i);
        g_7 := [load_value](l-nth(g_4, 0i), l+ (l-nth(g_4, 1i), {{ {{ "f", 0i, {{ "adt", "WP", {{ pty_T0 }} }} }} }}), {{ "ptr", true, {{ "adt", "N", {{ pty_T0 }} }} }}, true);
        g_6 := l-nth(g_7, 0i);
        u := [store_value](l-nth(m_6ret, 0i), l-nth(m_6ret, 1i), {{ "ref", true, pty_T0 }}, {{ l-nth(g_6, 0i), l+ (l-nth(g_6, 1i), {{ {{ "f", 0i, {{ "adt", "N", {{ pty_T0 }} }} }} }}) }});
        g_9 := [load_value](l-nth(m_1self, 0i), l-nth(m_1self, 1i), {{ "ref", true, {{ "adt", "WP", {{ pty_T0 }} }} }}, true);
        g_8 := l-nth(g_9, 0i);
        m_8 := g_8;
        g_10 := m_8;
        apply "extract_x::<T>"(pLft_a,pty_T0,g_10);
        goto bb2;
  bb2:  g_12 := [load_value](l-nth(m_6ret, 0i), l-nth(m_6ret, 1i), {{ "ref", true, pty_T0 }}, true);
        g_11 := l-nth(g_12, 0i);
        u := [store_value](l-nth(m_3, 0i), l-nth(m_3, 1i), {{ "ref", true, pty_T0 }}, g_11);
        g_14 := [load_value](l-nth(m_3, 0i), l-nth(m_3, 1i), {{ "ref", true, pty_T0 }}, true);
        g_13 := l-nth(g_14, 0i);
        u := [store_value](l-nth(m_2, 0i), l-nth(m_2, 1i), {{ "ref", true, pty_T0 }}, g_13);
        g_16 := [load_value](l-nth(m_2, 0i), l-nth(m_2, 1i), {{ "ref", true, pty_T0 }}, true);
        g_15 := l-nth(g_16, 0i);
        m_0 := g_15;
        g_17 := m_0;
        ret := g_17;
        goto rlab;
  rlab: u := [free](l-nth(m_1self, 0i), l-nth(m_1self, 1i), {{ "ref", true, {{ "adt", "WP", {{ pty_T0 }} }} }});
        u := [free](l-nth(m_2, 0i), l-nth(m_2, 1i), {{ "ref", true, pty_T0 }});
        u := [free](l-nth(m_3, 0i), l-nth(m_3, 1i), {{ "ref", true, pty_T0 }});
        u := [free](l-nth(m_6ret, 0i), l-nth(m_6ret, 1i), {{ "ref", true, pty_T0 }});
        return
};

spec "WP::<T>::second_mut"(pLft_a, pty_T0, m_1self)
[[ "<&mut WP<T> as gilogic::Ownable>::own"(#pLft_a, #pty_T0, #m_1self) * <lft>(#pLft_a; true) * types(#lvar_0: Obj, #lvar_1: List) * (#m_1self == {{ #lvar_0, #lvar_1 }}) * (m_1self == #m_1self) * (pty_T0 == #pty_T0) * (pLft_a == #pLft_a) ]]
[["<&mut T as gilogic::Ownable>::own"(#pLft_a, #pty_T0, ret) * <lft>(#pLft_a; true)]]
normal

proc "WP::<T>::second_mut"(pLft_a, pty_T0, m_1self) {
        g_0 := m_1self;
        m_1self := [alloc]({{ "ref", true, {{ "adt", "WP", {{ pty_T0 }} }} }});
        u := [store_value](l-nth(m_1self, 0i), l-nth(m_1self, 1i), {{ "ref", true, {{ "adt", "WP", {{ pty_T0 }} }} }}, g_0);
        m_2 := [alloc]({{ "ref", true, pty_T0 }});
        m_3 := [alloc]({{ "ref", true, pty_T0 }});
        m_6ret := [alloc]({{ "ref", true, pty_T0 }});
  bb0:  g_2 := [load_value](l-nth(m_1self, 0i), l-nth(m_1self, 1i), {{ "ref", true, {{ "adt", "WP", {{ pty_T0 }} }} }}, true);
        g_1 := l-nth(g_2, 0i);
        m_5 := g_1;
        g_3 := m_5;
        apply "freeze_xy::<T>"(pLft_a,pty_T0,g_3);
        goto bb1;
  bb1:  g_5 := [load_value](l-nth(m_1self, 0i), l-nth(m_1self, 1i), {{ "ref", true, {{ "adt", "WP", {{ pty_T0 }} }} }}, true);
        g_4 := l-nth(g_5, 0i);
        g_7 := [load_value](l-nth(g_4, 0i), l+ (l-nth(g_4, 1i), {{ {{ "f", 1i, {{ "adt", "WP", {{ pty_T0 }} }} }} }}), {{ "ptr", true, {{ "adt", "N", {{ pty_T0 }} }} }}, true);
        g_6 := l-nth(g_7, 0i);
        u := [store_value](l-nth(m_6ret, 0i), l-nth(m_6ret, 1i), {{ "ref", true, pty_T0 }}, {{ l-nth(g_6, 0i), l+ (l-nth(g_6, 1i), {{ {{ "f", 0i, {{ "adt", "N", {{ pty_T0 }} }} }} }}) }});
        g_9 := [load_value](l-nth(m_1self, 0i), l-nth(m_1self, 1i), {{ "ref", true, {{ "adt", "WP", {{ pty_T0 }} }} }}, true);
        g_8 := l-nth(g_9, 0i);
        m_8 := g_8;
        g_10 := m_8;
        apply "extract_y::<T>"(pLft_a,pty_T0,g_10);
        goto bb2;
  bb2:  g_12 := [load_value](l-nth(m_6ret, 0i), l-nth(m_6ret, 1i), {{ "ref", true, pty_T0 }}, true);
        g_11 := l-nth(g_12, 0i);
        u := [store_value](l-nth(m_3, 0i), l-nth(m_3, 1i), {{ "ref", true, pty_T0 }}, g_11);
        g_14 := [load_value](l-nth(m_3, 0i), l-nth(m_3, 1i), {{ "ref", true, pty_T0 }}, true);
        g_13 := l-nth(g_14, 0i);
        u := [store_value](l-nth(m_2, 0i), l-nth(m_2, 1i), {{ "ref", true, pty_T0 }}, g_13);
        g_16 := [load_value](l-nth(m_2, 0i), l-nth(m_2, 1i), {{ "ref", true, pty_T0 }}, true);
        g_15 := l-nth(g_16, 0i);
        m_0 := g_15;
        g_17 := m_0;
        ret := g_17;
        goto rlab;
  rlab: u := [free](l-nth(m_1self, 0i), l-nth(m_1self, 1i), {{ "ref", true, {{ "adt", "WP", {{ pty_T0 }} }} }});
        u := [free](l-nth(m_2, 0i), l-nth(m_2, 1i), {{ "ref", true, pty_T0 }});
        u := [free](l-nth(m_3, 0i), l-nth(m_3, 1i), {{ "ref", true, pty_T0 }});
        u := [free](l-nth(m_6ret, 0i), l-nth(m_6ret, 1i), {{ "ref", true, pty_T0 }});
        return
};

