warning: unused imports: `Prophecised`, `Prophecy`, `all_own_swap`, `extract_lemma`, `mutref_auto_resolve`, `prophecies::with_freeze_lemma_for_mutref`
  --> ../tests/proph/vecdeque.rs:11:25
   |
11 |     iterated::{all_own, all_own_swap},
   |                         ^^^^^^^^^^^^
12 |     macros::{
13 |         assertion, extract_lemma, predicate, prophecies::with_freeze_lemma_for_mutref,
   |                    ^^^^^^^^^^^^^             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
16 |     mutref_auto_resolve,
   |     ^^^^^^^^^^^^^^^^^^^
17 |     prophecies::{Ownable, Prophecised, Prophecy},
   |                           ^^^^^^^^^^^  ^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::slice`
  --> ../tests/proph/vecdeque.rs:23:5
   |
23 | use std::slice;
   |     ^^^^^^^^^^

warning: unnecessary parentheses around function argument
   --> ../tests/proph/vecdeque.rs:360:23
    |
360 |             * (end == (head + len - cap))
    |                       ^                ^
    |
    = note: `#[warn(unused_parens)]` on by default
help: remove these parentheses
    |
360 -             * (end == (head + len - cap))
360 +             * (end == head + len - cap)
    |

[TIMESTAMP WARN  lib_rtg::metadata] could not read metadata for crate `"std"`: Os { code: 2, kind: NotFound, message: "No such file or directory" }
[TIMESTAMP WARN  lib_rtg::metadata] could not read metadata for crate `"creusillian"`: Os { code: 2, kind: NotFound, message: "No such file or directory" }
warning: unused variable: `value`
   --> ../tests/proph/vecdeque.rs:418:33
    |
418 |     pub fn push_back(&mut self, value: T) {
    |                                 ^^^^^ help: if this is intentional, prefix it with an underscore: `_value`
    |
    = note: `#[warn(unused_variables)]` on by default

[TIMESTAMP WARN  lib_rtg::codegen::block] Not handling drop properly yet: _2
warning: unused variable: `off`
   --> ../tests/proph/vecdeque.rs:441:39
    |
441 |     unsafe fn buffer_write(&mut self, off: usize, value: T) {
    |                                       ^^^ help: if this is intentional, prefix it with an underscore: `_off`

warning: unused variable: `value`
   --> ../tests/proph/vecdeque.rs:441:51
    |
441 |     unsafe fn buffer_write(&mut self, off: usize, value: T) {
    |                                                   ^^^^^ help: if this is intentional, prefix it with an underscore: `_value`

[TIMESTAMP WARN  lib_rtg::codegen::block] Not handling drop properly yet: _3
warning: the feature `unchecked_math` has been stable since 1.79.0 and no longer requires an attribute to enable
 --> ../tests/proph/vecdeque.rs:5:12
  |
5 | #![feature(unchecked_math)]
  |            ^^^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: unnecessary `unsafe` block
   --> ../tests/proph/vecdeque.rs:442:9
    |
442 |         unsafe {
    |         ^^^^^^ unnecessary `unsafe` block
    |
    = note: `#[warn(unused_unsafe)]` on by default

warning: field `kind` is never read
  --> ../tests/proph/vecdeque.rs:34:5
   |
33 | pub struct TryReserveError {
   |            --------------- field in this struct
34 |     kind: TryReserveErrorKind,
   |     ^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: method `kind` is never used
  --> ../tests/proph/vecdeque.rs:44:8
   |
43 | impl TryReserveError {
   | -------------------- method in this implementation
44 |     fn kind(&self) -> TryReserveErrorKind {
   |        ^^^^

warning: variant `Zeroed` is never constructed
  --> ../tests/proph/vecdeque.rs:66:5
   |
62 | enum AllocInit {
   |      --------- variant in this enum
...
66 |     Zeroed,
   |     ^^^^^^

warning: function `handle_reserve` is never used
  --> ../tests/proph/vecdeque.rs:78:4
   |
78 | fn handle_reserve(result: Result<(), TryReserveError>) {
   |    ^^^^^^^^^^^^^^

warning: field `ptr` is never read
   --> ../tests/proph/vecdeque.rs:107:5
    |
106 | pub(crate) struct RawVec<T> {
    |                   ------ field in this struct
107 |     ptr: Unique<T>,
    |     ^^^

warning: function `finish_grow` is never used
   --> ../tests/proph/vecdeque.rs:111:4
    |
111 | fn finish_grow(
    |    ^^^^^^^^^^^

warning: associated items `MIN_NON_ZERO_CAP`, `current_memory`, `ptr`, `grow_amortized`, and `reserve_for_push` are never used
   --> ../tests/proph/vecdeque.rs:152:11
    |
151 | impl<T> RawVec<T> {
    | ----------------- associated items in this implementation
152 |     const MIN_NON_ZERO_CAP: usize = if mem::size_of::<T>() == 1 {
    |           ^^^^^^^^^^^^^^^^
...
169 |     fn current_memory(&self) -> Option<(NonNull<u8>, Layout)> {
    |        ^^^^^^^^^^^^^^
...
211 |     pub fn ptr(&self) -> *mut T {
    |            ^^^
...
220 |     fn grow_amortized(&mut self, len: usize, additional: usize) -> Result<(), TryReserveError> {
    |        ^^^^^^^^^^^^^^
...
267 |     pub fn reserve_for_push(&mut self, len: usize) {
    |            ^^^^^^^^^^^^^^^^

warning: field `head` is never read
   --> ../tests/proph/vecdeque.rs:300:5
    |
297 | pub struct VecDeque<T> {
    |            -------- field in this struct
...
300 |     head: usize,
    |     ^^^^

warning: function `wrap_index` is never used
   --> ../tests/proph/vecdeque.rs:528:4
    |
528 | fn wrap_index(logical_index: usize, capacity: usize) -> usize {
    |    ^^^^^^^^^^

warning: unused `std::result::Result` that must be used
   --> ../tests/proph/vecdeque.rs:431:9
    |
431 |         self.buf.grow_amortized(self.len, 1);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: `#[warn(unused_must_use)]` on by default
help: use `let _ = ...` to ignore the resulting value
    |
431 |         let _ = self.buf.grow_amortized(self.len, 1);
    |         +++++++

warning: 18 warnings emitted

[TIMESTAMP DEBUG rust_to_gil] Correct!
