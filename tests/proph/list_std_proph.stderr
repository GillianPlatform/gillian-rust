[TIMESTAMP WARN  lib_rtg::metadata] could not read metadata for crate `"std"`: Os { code: 2, kind: NotFound, message: "No such file or directory" }
[TIMESTAMP WARN  lib_rtg::metadata] could not read metadata for crate `"creusillian"`: Os { code: 2, kind: NotFound, message: "No such file or directory" }
[TIMESTAMP WARN  lib_rtg::codegen::block] Not handling drop properly yet: _4
[TIMESTAMP WARN  lib_rtg::codegen::block] Not handling drop properly yet: _1
[TIMESTAMP WARN  lib_rtg::codegen::block] Not handling drop properly yet: _1
[TIMESTAMP WARN  lib_rtg::codegen::block] Not handling drop properly yet: _2
[TIMESTAMP WARN  lib_rtg::codegen::block] Not handling drop properly yet: _16
[TIMESTAMP WARN  lib_rtg::codegen::block] Not handling drop properly yet: _4
[TIMESTAMP WARN  lib_rtg::codegen::block] Not handling drop properly yet: _2
[TIMESTAMP WARN  lib_rtg::codegen::block] Not handling drop properly yet: _16
[TIMESTAMP WARN  lib_rtg::codegen::block] Not handling drop properly yet: _4
[TIMESTAMP WARN  lib_rtg::codegen::block] Not handling drop properly yet: _7
[TIMESTAMP WARN  lib_rtg::codegen::block] Not handling drop properly yet: _6
[TIMESTAMP WARN  lib_rtg::codegen::block] Not handling drop properly yet: _3
[TIMESTAMP WARN  lib_rtg::codegen::block] Not handling drop properly yet: _2
[TIMESTAMP WARN  lib_rtg::codegen::block] Not handling drop properly yet: _2
[TIMESTAMP WARN  lib_rtg::codegen::block] Not handling drop properly yet: _7
[TIMESTAMP WARN  lib_rtg::codegen::block] Not handling drop properly yet: _2
warning: unused variable: `list`
  --> ../tests/proph/list_std_proph.rs:66:33
   |
66 | fn extract_head<'a, T: Ownable>(list: &'a mut LinkedList<T>) -> Prophecy<T::RepresentationTy>;
   |                                 ^^^^ help: if this is intentional, prefix it with an underscore: `_list`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `next`
   --> ../tests/proph/list_std_proph.rs:117:5
    |
117 |     next: Option<NonNull<Node<T>>>,
    |     ^^^^ help: if this is intentional, prefix it with an underscore: `_next`

warning: unused variable: `hptr`
   --> ../tests/proph/list_std_proph.rs:142:22
    |
142 |         assert_bind!(hptr, head_next, head_prev, element |
    |                      ^^^^ help: if this is intentional, prefix it with an underscore: `_hptr`

warning: unused variable: `head_prev`
   --> ../tests/proph/list_std_proph.rs:142:39
    |
142 |         assert_bind!(hptr, head_next, head_prev, element |
    |                                       ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_head_prev`

warning: unused variable: `element`
   --> ../tests/proph/list_std_proph.rs:142:50
    |
142 |         assert_bind!(hptr, head_next, head_prev, element |
    |                                                  ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_element`

warning: unused variable: `next`
   --> ../tests/proph/list_std_proph.rs:164:5
    |
164 |     next: Option<NonNull<Node<T>>>,
    |     ^^^^ help: if this is intentional, prefix it with an underscore: `_next`

warning: unused variable: `tptr`
   --> ../tests/proph/list_std_proph.rs:172:22
    |
172 |         assert_bind!(tptr, tail_prev, ep |
    |                      ^^^^ help: if this is intentional, prefix it with an underscore: `_tptr`

warning: unused variable: `ep`
   --> ../tests/proph/list_std_proph.rs:172:39
    |
172 |         assert_bind!(tptr, tail_prev, ep |
    |                                       ^^ help: if this is intentional, prefix it with an underscore: `_ep`

warning: unused variable: `hptr`
   --> ../tests/proph/list_std_proph.rs:202:22
    |
202 |         assert_bind!(hptr, head_next, ep|
    |                      ^^^^ help: if this is intentional, prefix it with an underscore: `_hptr`

warning: unused variable: `ep`
   --> ../tests/proph/list_std_proph.rs:202:39
    |
202 |         assert_bind!(hptr, head_next, ep|
    |                                       ^^ help: if this is intentional, prefix it with an underscore: `_ep`

warning: unused variable: `tptr`
   --> ../tests/proph/list_std_proph.rs:231:22
    |
231 |         assert_bind!(tptr, tail_prev, ep |
    |                      ^^^^ help: if this is intentional, prefix it with an underscore: `_tptr`

warning: unused variable: `ep`
   --> ../tests/proph/list_std_proph.rs:231:39
    |
231 |         assert_bind!(tptr, tail_prev, ep |
    |                                       ^^ help: if this is intentional, prefix it with an underscore: `_ep`

warning: associated function `shallow_model` is never used
  --> ../tests/proph/list_std_proph.rs:31:8
   |
28 | trait ShallowModel: Ownable {
   |       ------------ associated function in this trait
...
31 |     fn shallow_model(self_: Self::RepresentationTy, v: Self::ModelTy) -> gilogic::RustAssertion;
   |        ^^^^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: function `extract_head___proof` should have a snake case name
  --> ../tests/proph/list_std_proph.rs:66:4
   |
66 | fn extract_head<'a, T: Ownable>(list: &'a mut LinkedList<T>) -> Prophecy<T::RepresentationTy>;
   |    ^^^^^^^^^^^^ help: convert the identifier to snake case: `extract_head_proof`
   |
   = note: `#[warn(non_snake_case)]` on by default

warning: variable `THIS` should have a snake case name
   --> ../tests/proph/list_std_proph.rs:250:12
    |
250 |     fn own(self, model: Self::RepresentationTy) {
    |            ^^^^ help: convert the identifier to snake case: `this`

warning: 15 warnings emitted

[TIMESTAMP DEBUG rust_to_gil] Correct!
