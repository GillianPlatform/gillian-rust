warning: unused import: `Prophecised`
 --> ../tests/proph/list_std_proph.rs:8:27
  |
8 |     prophecies::{Ownable, Prophecised, Prophecy},
  |                           ^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

[TIMESTAMP WARN  lib_rtg::metadata] could not read metadata for crate `"std"`: Os { code: 2, kind: NotFound, message: "No such file or directory" }
[TIMESTAMP WARN  lib_rtg::metadata] could not read metadata for crate `"creusillian"`: Os { code: 2, kind: NotFound, message: "No such file or directory" }
[TIMESTAMP WARN  lib_rtg::codegen::block] Not handling drop properly yet: _4
[TIMESTAMP WARN  lib_rtg::codegen::block] Not handling drop properly yet: _1
[TIMESTAMP WARN  lib_rtg::codegen::block] Not handling drop properly yet: _1
[TIMESTAMP WARN  lib_rtg::codegen::block] Not handling drop properly yet: _2
[TIMESTAMP WARN  lib_rtg::codegen::block] Not handling drop properly yet: _16
[TIMESTAMP WARN  lib_rtg::codegen::block] Not handling drop properly yet: _4
[TIMESTAMP WARN  lib_rtg::codegen::block] Not handling drop properly yet: _2
[TIMESTAMP WARN  lib_rtg::codegen::block] Not handling drop properly yet: _16
[TIMESTAMP WARN  lib_rtg::codegen::block] Not handling drop properly yet: _4
[TIMESTAMP WARN  lib_rtg::codegen::block] Not handling drop properly yet: _7
[TIMESTAMP WARN  lib_rtg::codegen::block] Not handling drop properly yet: _6
[TIMESTAMP WARN  lib_rtg::codegen::block] Not handling drop properly yet: _3
[TIMESTAMP WARN  lib_rtg::codegen::block] Not handling drop properly yet: _2
[TIMESTAMP WARN  lib_rtg::codegen::block] Not handling drop properly yet: _2
[TIMESTAMP WARN  lib_rtg::codegen::block] Not handling drop properly yet: _7
[TIMESTAMP WARN  lib_rtg::codegen::block] Not handling drop properly yet: _2
warning: unused variable: `list`
  --> ../tests/proph/list_std_proph.rs:65:33
   |
65 | fn extract_head<'a, T: Ownable>(list: &'a mut LinkedList<T>) -> Prophecy<T::RepresentationTy>;
   |                                 ^^^^ help: if this is intentional, prefix it with an underscore: `_list`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `next`
   --> ../tests/proph/list_std_proph.rs:117:5
    |
117 |     next: Option<NonNull<Node<T>>>,
    |     ^^^^ help: if this is intentional, prefix it with an underscore: `_next`

warning: associated function `shallow_model` is never used
  --> ../tests/proph/list_std_proph.rs:30:8
   |
27 | trait ShallowModel: Ownable {
   |       ------------ associated function in this trait
...
30 |     fn shallow_model(self_: Self::RepresentationTy, v: Self::ModelTy) -> gilogic::RustAssertion;
   |        ^^^^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: function `extract_head___proof` should have a snake case name
  --> ../tests/proph/list_std_proph.rs:65:4
   |
65 | fn extract_head<'a, T: Ownable>(list: &'a mut LinkedList<T>) -> Prophecy<T::RepresentationTy>;
   |    ^^^^^^^^^^^^ help: convert the identifier to snake case: `extract_head_proof`
   |
   = note: `#[warn(non_snake_case)]` on by default

warning: variable `THIS` should have a snake case name
   --> ../tests/proph/list_std_proph.rs:168:12
    |
168 |     fn own(self, model: Self::RepresentationTy) {
    |            ^^^^ help: convert the identifier to snake case: `this`

warning: 6 warnings emitted

[TIMESTAMP DEBUG rust_to_gil] Correct!
