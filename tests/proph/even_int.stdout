#begin_init_data
{"EvenInt":["Struct","ReprRust",[["num",["Scalar","i32"]]]]}
#end_init_data

import "i__binop.gil", "i__lang.gil", "i__std_shims.gil", "i__prophecies.gil", "i__std_shims_pcy.gil", "i__lang_pcy.gil";

axiomatic spec "gilogic::prophecies::prophecy_auto_update::<EvenInt>"(pLft_0, p)
[[ <value>(l-nth(l-nth(#p, 0i), 0i), l-nth(l-nth(#p, 0i), 1i), {{ "adt", "EvenInt", {{  }} }}; #v) * "<EvenInt as gilogic::prophecies::Ownable>::own"(#v, #r) * <value_observer>(l-nth(#p, 1i); #a) * <pcy_controller>(l-nth(#p, 1i); #a) * types(#lvar_0: Obj, #lvar_1: List, #lvar_2: Obj) * (#p == {{ {{ #lvar_0, #lvar_1 }}, #lvar_2 }}) * (p == #p) * (pLft_0 == #pLft_0) ]]
[[<value>(l-nth(l-nth(#p, 0i), 0i), l-nth(l-nth(#p, 0i), 1i), {{ "adt", "EvenInt", {{  }} }}; #v) * "<EvenInt as gilogic::prophecies::Ownable>::own"(#v, #r) * <value_observer>(l-nth(#p, 1i); #r) * <pcy_controller>(l-nth(#p, 1i); #r)]]
normal

axiomatic spec "gilogic::prophecies::prophecy_resolve::<EvenInt>"(pLft_0, p)
[[ "<&mut EvenInt as gilogic::prophecies::Ownable>::own"(#pLft_0, #p, #m) * types(#lvar_0: Obj, #lvar_1: List, #lvar_2: Obj) * (#p == {{ {{ #lvar_0, #lvar_1 }}, #lvar_2 }}) * (p == #p) * (pLft_0 == #pLft_0) ]]
[[<observation>(((l-nth(#m, 0i)) = (l-nth(#m, 1i))); )]]
normal

pred "<EvenInt as gilogic::prophecies::Ownable>::own"(+self, model):
  (#self == {{ #model }}) * (((#model) i% (2i)) == 0i) * types(#model: Int)
  * (model == #model)
  * (self == #self);


pred "<i32 as gilogic::prophecies::Ownable>::own"(+self, model):
  (-2147483648i i<=# #self) * (#self i<=# 2147483647i) * (#self == #model)
  * types(#self: Int)
  * types(#model: Int)
  * (model == #model)
  * (self == #self);


pred "<std::option::Option<EvenInt> as gilogic::prophecies::Ownable>::own"(+self, model):
  (#self == {{ 0i, {{  }} }}) * (#model == {{ 0i, {{  }} }}) * (model == #model)
  * (self == #self), (#self == {{ 1i, {{ #ax }} }})
  * "<EvenInt as gilogic::prophecies::Ownable>::own"(#ax, #repr)
  * (#model == {{ 1i, {{ #repr }} }})
  * (model == #model)
  * (self == #self);


pred "<&mut EvenInt as gilogic::prophecies::Ownable>::own"(+pLft_erased, +self, model):
  (#model == {{ #a, #b }})
  * "gilogic::prophecies::mut_ref_inner_proph::<EvenInt>"(pLft_erased, #self)
  * <value_observer>(l-nth(#self, 1i); #a)
  * (#lvar_0 == #b)
  * <pcy_value>(l-nth(#self, 1i); #lvar_0)
  * types(#lvar_1: Obj, #lvar_2: List, #lvar_3: Obj)
  * (#self == {{ {{ #lvar_1, #lvar_2 }}, #lvar_3 }})
  * (model == #model)
  * (self == #self);


pred "<() as gilogic::prophecies::Ownable>::own"(+self, model):
  (#self == {{  }}) * (#self == #model) * (model == #model) * (self == #self);


pred "gilogic::prophecies::mut_ref_inner_proph::<EvenInt>"(+pLft_a, +this):
  <value>(l-nth(l-nth(#this, 0i), 0i), l-nth(l-nth(#this, 0i), 1i), {{ "adt", "EvenInt", {{  }} }}; #v)
  * "<EvenInt as gilogic::prophecies::Ownable>::own"(#v, #repr)
  * <pcy_controller>(l-nth(#this, 1i); #repr)
  * types(#lvar_0: Obj, #lvar_1: List, #lvar_2: Obj)
  * (#this == {{ {{ #lvar_0, #lvar_1 }}, #lvar_2 }})
  * (this == #this);
guard: <lft>(pLft_a; true);

spec "EvenInt::new_2"(x)
[[ "<i32 as gilogic::prophecies::Ownable>::own"(#x, #x_repr) * types(#x_repr: Int) * types(#x: Int) * (x == #x) ]]
[["<EvenInt as gilogic::prophecies::Ownable>::own"(ret, #ret_repr) * <observation>(true; )]]
normal

proc "EvenInt::new_2"(x) {
        m_1x := x;
        m_14 := [alloc]({{ "tuple", {{ "i32", "bool" }} }});
        m_17 := [alloc]({{ "tuple", {{ "i32", "bool" }} }});
  bb0:  m_4 := m_1x;
        m_5 := ((2i) = (0i));
        g_0 := m_5;
        u := "i__lang_assert"(not g_0, "remainder by zero");
        goto bb1;
  bb1:  m_6 := ((2i) = (-1i));
        m_7 := ((m_4) = (-2147483648i));
        g_1 := m_6;
        g_2 := m_7;
        m_8 := ((g_1) and (g_2));
        g_3 := m_8;
        u := "i__lang_assert"(not g_3, "overflow check failed");
        goto bb2;
  bb2:  g_4 := m_4;
        m_3 := ((g_4) i% (2i));
        g_5 := m_3;
        m_2 := ((g_5) = (0i));
        g_6 := m_2;
        goto [g_6] bb3 bb4;
  bb3:  m_9 := m_1x;
        g_7 := m_9;
        m_0 := {{ g_7 }};
        goto bb10;
  bb4:  m_11 := m_1x;
        g_8 := m_11;
        m_10 := ((g_8) i< (1000i));
        g_9 := m_10;
        goto [g_9] bb5 bb7;
  bb5:  m_13 := m_1x;
        g_10 := "i__binop_checked_add"(m_13, 1i, 2147483647i);
        u := [store_value](l-nth(m_14, 0i), l-nth(m_14, 1i), {{ "tuple", {{ "i32", "bool" }} }}, g_10);
        g_12 := [load_value](l-nth(m_14, 0i), l+(l-nth(m_14, 1i), {{ {{ "f", 1i, {{ "tuple", {{ "i32", "bool" }} }} }} }}), "bool", false);
        g_11 := l-nth(g_12, 0i);
        u := "i__lang_assert"(not g_11, "overflow check failed");
        goto bb6;
  bb6:  g_14 := [load_value](l-nth(m_14, 0i), l+(l-nth(m_14, 1i), {{ {{ "f", 0i, {{ "tuple", {{ "i32", "bool" }} }} }} }}), "i32", false);
        g_13 := l-nth(g_14, 0i);
        m_12 := g_13;
        g_15 := m_12;
        m_0 := {{ g_15 }};
        goto bb9;
  bb7:  m_16 := m_1x;
        g_16 := "i__binop_checked_sub"(m_16, 1i);
        u := [store_value](l-nth(m_17, 0i), l-nth(m_17, 1i), {{ "tuple", {{ "i32", "bool" }} }}, g_16);
        g_18 := [load_value](l-nth(m_17, 0i), l+(l-nth(m_17, 1i), {{ {{ "f", 1i, {{ "tuple", {{ "i32", "bool" }} }} }} }}), "bool", false);
        g_17 := l-nth(g_18, 0i);
        u := "i__lang_assert"(not g_17, "overflow check failed");
        goto bb8;
  bb8:  g_20 := [load_value](l-nth(m_17, 0i), l+(l-nth(m_17, 1i), {{ {{ "f", 0i, {{ "tuple", {{ "i32", "bool" }} }} }} }}), "i32", false);
        g_19 := l-nth(g_20, 0i);
        m_15 := g_19;
        g_21 := m_15;
        m_0 := {{ g_21 }};
        goto bb9;
  bb9:  goto bb10;
  bb10: g_22 := m_0;
        ret := g_22;
        goto rlab;
  rlab: u := [free](l-nth(m_14, 0i), l-nth(m_14, 1i), {{ "tuple", {{ "i32", "bool" }} }});
        u := [free](l-nth(m_17, 0i), l-nth(m_17, 1i), {{ "tuple", {{ "i32", "bool" }} }});
        return
};

proc "EvenInt::new"(x) {
        m_1x := x;
  bb0:  m_2 := m_1x;
        g_0 := m_2;
        m_0 := {{ g_0 }};
        g_1 := m_0;
        ret := g_1;
        goto rlab;
  rlab: return
};

spec "EvenInt::new_3"(x)
[[ "<i32 as gilogic::prophecies::Ownable>::own"(#x, #x_repr) * types(#x_repr: Int) * types(#x: Int) * (x == #x) ]]
[["<std::option::Option<EvenInt> as gilogic::prophecies::Ownable>::own"(ret, #ret_repr) * <observation>(true; )]]
normal

proc "EvenInt::new_3"(x) {
        m_1x := x;
  bb0:  m_4 := m_1x;
        m_5 := ((2i) = (0i));
        g_0 := m_5;
        u := "i__lang_assert"(not g_0, "remainder by zero");
        goto bb1;
  bb1:  m_6 := ((2i) = (-1i));
        m_7 := ((m_4) = (-2147483648i));
        g_1 := m_6;
        g_2 := m_7;
        m_8 := ((g_1) and (g_2));
        g_3 := m_8;
        u := "i__lang_assert"(not g_3, "overflow check failed");
        goto bb2;
  bb2:  g_4 := m_4;
        m_3 := ((g_4) i% (2i));
        g_5 := m_3;
        m_2 := ((g_5) = (0i));
        g_6 := m_2;
        goto [g_6] bb3 bb5;
  bb3:  m_10 := m_1x;
        g_7 := m_10;
        g_8 := "EvenInt::new"(g_7);
        m_9y := g_8;
        goto bb4;
  bb4:  g_9 := m_9y;
        m_11 := g_9;
        g_10 := m_11;
        m_0 := {{ 1i, {{ g_10 }} }};
        goto bb6;
  bb5:  m_0 := {{ 0i, {{  }} }};
        goto bb6;
  bb6:  g_11 := m_0;
        ret := g_11;
        goto rlab;
  rlab: return
};

proc "EvenInt::add"(pLft_0, self) {
        m_1self := self;
        g_0 := m_1self;
        m_1self := [alloc]({{ "ref", true, {{ "adt", "EvenInt", {{  }} }} }});
        u := [store_value](l-nth(m_1self, 0i), l-nth(m_1self, 1i), {{ "ref", true, {{ "adt", "EvenInt", {{  }} }} }}, g_0);
        m_2 := [alloc]({{ "tuple", {{ "i32", "bool" }} }});
  bb0:  g_2 := [load_value](l-nth(m_1self, 0i), l-nth(m_1self, 1i), {{ "ref", true, {{ "adt", "EvenInt", {{  }} }} }}, true);
        g_1 := l-nth(g_2, 0i);
        g_4 := [load_value](l-nth(l-nth(g_1, 0i), 0i), l+(l-nth(l-nth(g_1, 0i), 1i), {{ {{ "f", 0i, {{ "adt", "EvenInt", {{  }} }} }} }}), "i32", true);
        g_3 := l-nth(g_4, 0i);
        g_5 := "i__binop_checked_add"(g_3, 1i, 2147483647i);
        u := [store_value](l-nth(m_2, 0i), l-nth(m_2, 1i), {{ "tuple", {{ "i32", "bool" }} }}, g_5);
        g_7 := [load_value](l-nth(m_2, 0i), l+(l-nth(m_2, 1i), {{ {{ "f", 1i, {{ "tuple", {{ "i32", "bool" }} }} }} }}), "bool", false);
        g_6 := l-nth(g_7, 0i);
        u := "i__lang_assert"(not g_6, "overflow check failed");
        goto bb1;
  bb1:  g_9 := [load_value](l-nth(m_2, 0i), l+(l-nth(m_2, 1i), {{ {{ "f", 0i, {{ "tuple", {{ "i32", "bool" }} }} }} }}), "i32", false);
        g_8 := l-nth(g_9, 0i);
        g_11 := [load_value](l-nth(m_1self, 0i), l-nth(m_1self, 1i), {{ "ref", true, {{ "adt", "EvenInt", {{  }} }} }}, true);
        g_10 := l-nth(g_11, 0i);
        u := [store_value](l-nth(l-nth(g_10, 0i), 0i), l+(l-nth(l-nth(g_10, 0i), 1i), {{ {{ "f", 0i, {{ "adt", "EvenInt", {{  }} }} }} }}), "i32", g_8);
        m_0 := {{}};
        g_12 := m_0;
        ret := g_12;
        goto rlab;
  rlab: u := [free](l-nth(m_1self, 0i), l-nth(m_1self, 1i), {{ "ref", true, {{ "adt", "EvenInt", {{  }} }} }});
        u := [free](l-nth(m_2, 0i), l-nth(m_2, 1i), {{ "tuple", {{ "i32", "bool" }} }});
        return
};

spec "EvenInt::test"(pLft_0, self)
[[ "<&mut EvenInt as gilogic::prophecies::Ownable>::own"(#pLft_0, #self, #self_repr) * <lft>(#pLft_0; true) * types(#lvar_0: Obj, #lvar_1: List, #lvar_2: Obj) * (#self == {{ {{ #lvar_0, #lvar_1 }}, #lvar_2 }}) * (self == #self) * (pLft_0 == #pLft_0) ]]
[["<() as gilogic::prophecies::Ownable>::own"(ret, #ret_repr) * <observation>(true; ) * <lft>(#pLft_0; true)]]
normal

proc "EvenInt::test"(pLft_0, self) {
        m_1self := self;
        g_0 := m_1self;
        m_1self := [alloc]({{ "ref", true, {{ "adt", "EvenInt", {{  }} }} }});
        u := [store_value](l-nth(m_1self, 0i), l-nth(m_1self, 1i), {{ "ref", true, {{ "adt", "EvenInt", {{  }} }} }}, g_0);
  bb0:  g_2 := [load_value](l-nth(m_1self, 0i), l-nth(m_1self, 1i), {{ "ref", true, {{ "adt", "EvenInt", {{  }} }} }}, true);
        g_1 := l-nth(g_2, 0i);
        g_4 := [load_value](l-nth(l-nth(g_1, 0i), 0i), l+(l-nth(l-nth(g_1, 0i), 1i), {{ {{ "f", 0i, {{ "adt", "EvenInt", {{  }} }} }} }}), "i32", true);
        g_3 := l-nth(g_4, 0i);
        m_4 := g_3;
        m_5 := ((2i) = (0i));
        g_5 := m_5;
        u := "i__lang_assert"(not g_5, "remainder by zero");
        goto bb1;
  bb1:  m_6 := ((2i) = (-1i));
        m_7 := ((m_4) = (-2147483648i));
        g_6 := m_6;
        g_7 := m_7;
        m_8 := ((g_6) and (g_7));
        g_8 := m_8;
        u := "i__lang_assert"(not g_8, "overflow check failed");
        goto bb2;
  bb2:  g_9 := m_4;
        m_3 := ((g_9) i% (2i));
        g_10 := m_3;
        m_2 := not ((g_10) = (0i));
        g_11 := m_2;
        goto [g_11] bb3 bb4;
  bb3:  g_12 := "EvenInt::test::panic_cold_explicit"();
        m_10 := g_12;
  bb4:  m_0 := {{}};
        g_13 := m_0;
        ret := g_13;
        goto rlab;
  rlab: u := [free](l-nth(m_1self, 0i), l-nth(m_1self, 1i), {{ "ref", true, {{ "adt", "EvenInt", {{  }} }} }});
        return
};

proc "EvenInt::test::panic_cold_explicit"() {
  bb0:  g_0 := "core::panicking::panic_explicit"();
        m_0 := g_0;
  rlab: return
};

spec "EvenInt::add_two"(pLft_0, self)
[[ "<&mut EvenInt as gilogic::prophecies::Ownable>::own"(#pLft_0, #self, #self_repr) * <observation>(((l-nth(#self_repr, 0i)) i<= (2147483645i)); ) * <lft>(#pLft_0; true) * types(#lvar_0: Obj, #lvar_1: List, #lvar_2: Obj) * (#self == {{ {{ #lvar_0, #lvar_1 }}, #lvar_2 }}) * (self == #self) * (pLft_0 == #pLft_0) ]]
[["<() as gilogic::prophecies::Ownable>::own"(ret, #ret_repr) * <observation>(((l-nth(#self_repr, 1i)) = (((l-nth(#self_repr, 0i)) i+ (2i)))); ) * <lft>(#pLft_0; true)]]
normal

proc "EvenInt::add_two"(pLft_0, self) {
        m_1self := self;
        g_0 := m_1self;
        m_1self := [alloc]({{ "ref", true, {{ "adt", "EvenInt", {{  }} }} }});
        u := [store_value](l-nth(m_1self, 0i), l-nth(m_1self, 1i), {{ "ref", true, {{ "adt", "EvenInt", {{  }} }} }}, g_0);
  bb0:  g_2 := [load_value](l-nth(m_1self, 0i), l-nth(m_1self, 1i), {{ "ref", true, {{ "adt", "EvenInt", {{  }} }} }}, true);
        g_1 := l-nth(g_2, 0i);
        g_4 := [load_value](l-nth(l-nth(g_1, 0i), 0i), l+(l-nth(l-nth(g_1, 0i), 1i), {{ {{ "f", 0i, {{ "adt", "EvenInt", {{  }} }} }} }}), "i32", true);
        g_3 := l-nth(g_4, 0i);
        m_2 := g_3;
        g_6 := [load_value](l-nth(m_1self, 0i), l-nth(m_1self, 1i), {{ "ref", true, {{ "adt", "EvenInt", {{  }} }} }}, true);
        g_5 := l-nth(g_6, 0i);
        g_7 := [new_lft]();
        pLft_8 := l-nth(g_7, 0i);
        m_5 := g_5;
        g_8 := m_5;
        g_9 := "EvenInt::add"(pLft_0, g_8);
        m_4 := g_9;
        goto bb1;
  bb1:  g_11 := [load_value](l-nth(m_1self, 0i), l-nth(m_1self, 1i), {{ "ref", true, {{ "adt", "EvenInt", {{  }} }} }}, true);
        g_10 := l-nth(g_11, 0i);
        g_12 := [new_lft]();
        pLft_9 := l-nth(g_12, 0i);
        m_7 := g_10;
        g_13 := m_7;
        g_14 := "EvenInt::add"(pLft_0, g_13);
        m_6 := g_14;
        goto bb2;
  bb2:  m_3 := {{}};
        g_15 := "gilogic::prophecies::check_obs_sat"();
        m_8 := g_15;
        goto bb3;
  bb3:  g_17 := [load_value](l-nth(m_1self, 0i), l-nth(m_1self, 1i), {{ "ref", true, {{ "adt", "EvenInt", {{  }} }} }}, true);
        g_16 := l-nth(g_17, 0i);
        g_18 := [new_lft]();
        pLft_10 := l-nth(g_18, 0i);
        m_10 := g_16;
        g_19 := m_10;
        g_20 := "gilogic::prophecies::prophecy_auto_update::<EvenInt>"(pLft_0, g_19);
        m_9 := g_20;
        goto bb4;
  bb4:  g_22 := [load_value](l-nth(m_1self, 0i), l-nth(m_1self, 1i), {{ "ref", true, {{ "adt", "EvenInt", {{  }} }} }}, true);
        g_21 := l-nth(g_22, 0i);
        g_23 := [new_lft]();
        pLft_11 := l-nth(g_23, 0i);
        m_12 := g_21;
        g_24 := m_12;
        g_25 := "gilogic::prophecies::prophecy_resolve::<EvenInt>"(pLft_0, g_24);
        m_11 := g_25;
        goto bb5;
  bb5:  m_0 := {{}};
        g_26 := m_0;
        ret := g_26;
        goto rlab;
  rlab: u := [free](l-nth(m_1self, 0i), l-nth(m_1self, 1i), {{ "ref", true, {{ "adt", "EvenInt", {{  }} }} }});
        return
};

