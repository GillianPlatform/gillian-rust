use std::fmt;

#[derive(Debug, Copy, Clone)]
pub enum BinOp {
    Equal,
    ILessThan,
    ILessThanEqual,
    IPlus,
    IMinus,
    ITimes,
    IDiv,
    IMod,
    FLessThan,
    FLessThanEqual,
    FPlus,
    FMinus,
    FTimes,
    FDiv,
    FMod,
    SLessThan,
    BAnd,
    BOr,
    BitwiseAnd,
    BitwiseOr,
    BitwiseXor,
    LeftShift,
    SignedRightShift,
    UnsignedRightShift,
    BitwiseAndL,
    BitwiseOrL,
    BitwiseXorL,
    LeftShiftL,
    SignedRightShiftL,
    UnsignedRightShiftL,
    M_atan2,
    M_pow,
    LstNth,
    LstRepeat,
    StrCat,
    StrNth,
    SetDiff,
    BSetMem,
    BSetSub,
}

impl fmt::Display for BinOp {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        use BinOp::*;
        match self {
            Equal => write!(f, "="),
            ILessThan => write!(f, "i<"),
            ILessThanEqual => write!(f, "i<="),
            IPlus => write!(f, "i+"),
            IMinus => write!(f, "i-"),
            ITimes => write!(f, "i*"),
            IDiv => write!(f, "i/"),
            IMod => write!(f, "i%"),
            FLessThan => write!(f, "<"),
            FLessThanEqual => write!(f, "<="),
            FPlus => write!(f, "+"),
            FMinus => write!(f, "-"),
            FTimes => write!(f, "*"),
            FDiv => write!(f, "/"),
            FMod => write!(f, "%"),
            SLessThan => write!(f, "s<"),
            BAnd => write!(f, "and"),
            BOr => write!(f, "or"),
            BitwiseAnd => write!(f, "&"),
            BitwiseOr => write!(f, "|"),
            BitwiseXor => write!(f, "^"),
            LeftShift => write!(f, "<<"),
            SignedRightShift => write!(f, ">>"),
            UnsignedRightShift => write!(f, ">>>"),
            BitwiseAndL => write!(f, "&l"),
            BitwiseOrL => write!(f, "|l"),
            BitwiseXorL => write!(f, "^l"),
            LeftShiftL => write!(f, "<<l"),
            SignedRightShiftL => write!(f, ">>l"),
            UnsignedRightShiftL => write!(f, ">>>l"),
            M_atan2 => write!(f, "m_atan2"),
            M_pow => write!(f, "**"),
            LstNth => write!(f, "l-nth"),
            LstRepeat => write!(f, "l-repeat"),
            StrCat => write!(f, "++"),
            StrNth => write!(f, "s-nth"),
            SetDiff => write!(f, "-d-"),
            BSetMem => write!(f, "-e-"),
            BSetSub => write!(f, "-s-"),
        }
    }
}
