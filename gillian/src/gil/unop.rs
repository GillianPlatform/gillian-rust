use std::fmt;

#[derive(Debug, Clone, Copy)]
pub enum UnOp {
    IUnaryMinus,
    FUnaryMinus,
    UNot,
    BitwiseNot,
    M_isNaN,
    M_abs,
    M_acos,
    M_asin,
    M_atan,
    M_ceil,
    M_cos,
    M_exp,
    M_floor,
    M_log,
    M_round,
    M_sgn,
    M_sin,
    M_sqrt,
    M_tan,
    ToStringOp,
    ToIntOp,
    ToUint16Op,
    ToUint32Op,
    ToInt32Op,
    ToNumberOp,
    TypeOf,
    Car,
    Cdr,
    LstLen,
    LstRev,
    SetToList,
    StrLen,
}

impl fmt::Display for UnOp {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        use UnOp::*;
        match self {
            IUnaryMinus => write!(f, "i-"),
            FUnaryMinus => write!(f, "-"),
            UNot => write!(f, "not"),
            BitwiseNot => write!(f, "~"),
            M_isNaN => write!(f, "isNaN"),
            M_abs => write!(f, "m_abs"),
            M_acos => write!(f, "m_acos"),
            M_asin => write!(f, "m_asin"),
            M_atan => write!(f, "m_atan"),
            M_ceil => write!(f, "m_ceil"),
            M_cos => write!(f, "m_cos"),
            M_exp => write!(f, "m_exp"),
            M_floor => write!(f, "m_floor"),
            M_log => write!(f, "m_log"),
            M_round => write!(f, "m_round"),
            M_sgn => write!(f, "m_sgn"),
            M_sin => write!(f, "m_sin"),
            M_sqrt => write!(f, "m_sqrt"),
            M_tan => write!(f, "m_tan"),
            ToStringOp => write!(f, "num_to_string"),
            ToIntOp => write!(f, "num_to_int"),
            ToUint16Op => write!(f, "num_to_uint16"),
            ToInt32Op => write!(f, "num_to_int32"),
            ToUint32Op => write!(f, "num_to_uint32"),
            ToNumberOp => write!(f, "string_to_num"),
            TypeOf => write!(f, "typeOf"),
            Car => write!(f, "car"),
            Cdr => write!(f, "cdr"),
            LstLen => write!(f, "l-len"),
            LstRev => write!(f, "l-rev"),
            StrLen => write!(f, "s-len"),
            SetToList => write!(f, "set_to_list"),
        }
    }
}
