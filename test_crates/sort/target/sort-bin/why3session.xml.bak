<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"https://www.why3.org/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="Z3" version="4.12.4" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="1" name="CVC4" version="1.8" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="2" name="Alt-Ergo" version="2.5.3" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="3" name="CVC5" version="1.0.5" timelimit="1" steplimit="0" memlimit="1000"/>
<file format="mlcfg" proved="true">
<path name=".."/><path name="sort-bin.mlcfg"/>
<theory name="Sort_RightPad" proved="true">
 <goal name="right_pad&#39;vc" expl="VC for right_pad" proved="true">
 <proof prover="3"><result status="valid" time="0.108626" steps="19983"/></proof>
 </goal>
</theory>
<theory name="Sort_GnomeSort" proved="true">
 <goal name="gnome_sort&#39;vc" expl="VC for gnome_sort" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="gnome_sort&#39;vc.0" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.035642" steps="9887"/></proof>
  </goal>
  <goal name="gnome_sort&#39;vc.1" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.044813" steps="12803"/></proof>
  </goal>
  <goal name="gnome_sort&#39;vc.2" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.054893" steps="13810"/></proof>
  </goal>
  <goal name="gnome_sort&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.069032" steps="16788"/></proof>
  </goal>
  <goal name="gnome_sort&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.063810" steps="15769"/></proof>
  </goal>
  <goal name="gnome_sort&#39;vc.5" expl="integer overflow" proved="true">
  <proof prover="3"><result status="valid" time="0.064355" steps="15789"/></proof>
  </goal>
  <goal name="gnome_sort&#39;vc.6" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.054649" steps="14918"/></proof>
  </goal>
  <goal name="gnome_sort&#39;vc.7" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.055770" steps="15154"/></proof>
  </goal>
  <goal name="gnome_sort&#39;vc.8" expl="integer overflow" proved="true">
  <proof prover="3"><result status="valid" time="0.071016" steps="17170"/></proof>
  </goal>
  <goal name="gnome_sort&#39;vc.9" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.058148" steps="16011"/></proof>
  </goal>
  <goal name="gnome_sort&#39;vc.10" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.057405" steps="15463"/></proof>
  </goal>
  <goal name="gnome_sort&#39;vc.11" expl="integer overflow" proved="true">
  <proof prover="3"><result status="valid" time="0.069386" steps="17561"/></proof>
  </goal>
  <goal name="gnome_sort&#39;vc.12" expl="integer overflow" proved="true">
  <proof prover="3"><result status="valid" time="0.069822" steps="17469"/></proof>
  </goal>
  <goal name="gnome_sort&#39;vc.13" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.074421" steps="25491"/></proof>
  </goal>
  <goal name="gnome_sort&#39;vc.14" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="gnome_sort&#39;vc.14.0" expl="loop invariant preservation" proved="true">
   <proof prover="2"><result status="valid" time="0.154625" steps="3087"/></proof>
   </goal>
   <goal name="gnome_sort&#39;vc.14.1" expl="loop invariant preservation" proved="true">
   <proof prover="2"><result status="valid" time="0.250737" steps="3143"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="gnome_sort&#39;vc.15" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="gnome_sort&#39;vc.15.0" expl="loop invariant preservation" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="gnome_sort&#39;vc.15.0.0" expl="loop invariant preservation" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="gnome_sort&#39;vc.15.0.0.0" expl="loop invariant preservation" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="gnome_sort&#39;vc.15.0.0.0.0" expl="loop invariant preservation" proved="true">
      <proof prover="3" timelimit="5" memlimit="2000"><result status="valid" time="1.134286" steps="206496"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="gnome_sort&#39;vc.15.1" expl="loop invariant preservation" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="gnome_sort&#39;vc.15.1.0" expl="loop invariant preservation" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="gnome_sort&#39;vc.15.1.0.0" expl="loop invariant preservation" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="gnome_sort&#39;vc.15.1.0.0.0" expl="loop invariant preservation" proved="true">
      <proof prover="3" timelimit="5" memlimit="2000"><result status="valid" time="1.572620" steps="241620"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="gnome_sort&#39;vc.15.1.0.1" expl="loop invariant preservation" proved="true">
     <proof prover="3"><result status="valid" time="0.048724" steps="14592"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Sort_Extend" proved="true">
 <goal name="extend&#39;vc" expl="VC for extend" proved="true">
 <proof prover="2"><result status="valid" time="0.346495" steps="4338"/></proof>
 </goal>
</theory>
<theory name="Sort_PermutFrameApp_Impl" proved="true">
 <goal name="vc_permut_frame_app" proved="true">
 <proof prover="3"><result status="valid" time="0.245952" steps="71384"/></proof>
 </goal>
</theory>
<theory name="Sort_PermutApp_Impl" proved="true">
 <goal name="vc_permut_app" proved="true">
 <proof prover="0"><result status="valid" time="0.059079" steps="337958"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="vc_permut_app.0" proved="true">
  <proof prover="0"><result status="valid" time="0.077934" steps="337988"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Sort_PermutApp2_Impl" proved="true">
 <goal name="vc_permut_app2" proved="true">
 <proof prover="0"><result status="valid" time="0.060927" steps="316518"/></proof>
 </goal>
</theory>
<theory name="Sort_PermutPush_Impl" proved="true">
 <goal name="vc_permut_push" proved="true">
 <proof prover="0"><result status="valid" time="0.360048" steps="1748701"/></proof>
 </goal>
</theory>
<theory name="Sort_MergeAux" proved="true">
 <goal name="merge_aux&#39;vc" expl="VC for merge_aux" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="merge_aux&#39;vc.0" expl="precondition" proved="true">
  <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
   <goal name="merge_aux&#39;vc.0.0" expl="precondition" proved="true">
   <transf name="remove" proved="true" arg1="extensionality,create&#39;spec,create&#39;spec&#39;0,empty&#39;def,set&#39;spec,set&#39;spec&#39;0,set&#39;spec&#39;1,set&#39;def,([&lt;-])&#39;def,singleton&#39;spec,singleton&#39;spec&#39;0,cat_back,cat_back&#39;0,snoc_dec,cat_dec">
    <goal name="merge_aux&#39;vc.0.0.0" expl="precondition" proved="true">
    <proof prover="3"><result status="valid" time="0.046482" steps="14215"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="merge_aux&#39;vc.1" expl="assertion" proved="true">
  <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
   <goal name="merge_aux&#39;vc.1.0" expl="assertion" proved="true">
   <transf name="remove" proved="true" arg1="extensionality,create&#39;spec,create&#39;spec&#39;0,empty&#39;def,set&#39;spec,set&#39;spec&#39;0,set&#39;spec&#39;1,set&#39;def,([&lt;-])&#39;def,singleton&#39;spec,singleton&#39;spec&#39;0,cat_back,cat_back&#39;0,snoc_dec,cat_dec">
    <goal name="merge_aux&#39;vc.1.0.0" expl="assertion" proved="true">
    <transf name="remove" proved="true" arg1="singleton,cons,snoc,(++),mem,occ_all,seq_eq_sub,exchange">
     <goal name="merge_aux&#39;vc.1.0.0.0" expl="assertion" proved="true">
     <proof prover="3"><result status="valid" time="0.645821" steps="139566"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="merge_aux&#39;vc.2" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.044597" steps="15572"/></proof>
  </goal>
  <goal name="merge_aux&#39;vc.3" expl="assertion" proved="true">
  <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
   <goal name="merge_aux&#39;vc.3.0" expl="assertion" proved="true">
   <proof prover="3" timelimit="5"><result status="valid" time="0.990189" steps="179619"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="merge_aux&#39;vc.4" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.046026" steps="15957"/></proof>
  </goal>
  <goal name="merge_aux&#39;vc.5" expl="precondition" proved="true">
  <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
   <goal name="merge_aux&#39;vc.5.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.018069" steps="57"/></proof>
   <proof prover="3"><result status="valid" time="0.062397" steps="18791"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="merge_aux&#39;vc.6" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.046024" steps="15957"/></proof>
  </goal>
  <goal name="merge_aux&#39;vc.7" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.055929" steps="17093"/></proof>
  </goal>
  <goal name="merge_aux&#39;vc.8" expl="assertion" proved="true">
  <transf name="subst_all" proved="true" >
   <goal name="merge_aux&#39;vc.8.0" expl="assertion" proved="true">
   <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
    <goal name="merge_aux&#39;vc.8.0.0" expl="assertion" proved="true">
    <proof prover="3" timelimit="5" memlimit="2000"><result status="valid" time="1.211804" steps="213164"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="merge_aux&#39;vc.9" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.046432" steps="16061"/></proof>
  </goal>
  <goal name="merge_aux&#39;vc.10" expl="precondition" proved="true">
  <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
   <goal name="merge_aux&#39;vc.10.0" expl="precondition" proved="true">
   <proof prover="2" timelimit="5"><result status="valid" time="0.017848" steps="57"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="merge_aux&#39;vc.11" expl="precondition" proved="true">
  <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
   <goal name="merge_aux&#39;vc.11.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.014974" steps="56"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="merge_aux&#39;vc.12" expl="precondition" proved="true">
  <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
   <goal name="merge_aux&#39;vc.12.0" expl="precondition" proved="true">
   <proof prover="3" timelimit="5"><result status="valid" time="0.067967" steps="19210"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="merge_aux&#39;vc.13" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.069214" steps="19457"/></proof>
  </goal>
  <goal name="merge_aux&#39;vc.14" expl="precondition" proved="true">
  <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
   <goal name="merge_aux&#39;vc.14.0" expl="precondition" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="merge_aux&#39;vc.14.0.0" expl="precondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="merge_aux&#39;vc.14.0.0.0" expl="precondition" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="merge_aux&#39;vc.14.0.0.0.0" expl="precondition" proved="true">
      <proof prover="1"><result status="valid" time="0.248301" steps="45371"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="merge_aux&#39;vc.15" expl="precondition" proved="true">
  <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
   <goal name="merge_aux&#39;vc.15.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.078510" steps="22137"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="merge_aux&#39;vc.16" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="merge_aux&#39;vc.16.0" expl="precondition" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="merge_aux&#39;vc.16.0.0" expl="precondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="merge_aux&#39;vc.16.0.0.0" expl="precondition" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="merge_aux&#39;vc.16.0.0.0.0" expl="precondition" proved="true">
      <proof prover="3" timelimit="6" memlimit="4000"><result status="valid" time="0.157845" steps="41950"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="merge_aux&#39;vc.17" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="merge_aux&#39;vc.17.0" expl="precondition" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="merge_aux&#39;vc.17.0.0" expl="precondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="merge_aux&#39;vc.17.0.0.0" expl="precondition" proved="true">
     <proof prover="3"><result status="valid" time="0.237732" steps="43716"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="merge_aux&#39;vc.18" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="merge_aux&#39;vc.18.0" expl="precondition" proved="true">
   <proof prover="3" timelimit="5" memlimit="2000"><result status="valid" time="2.850127" steps="545555"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="merge_aux&#39;vc.19" expl="assertion" proved="true">
  <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
   <goal name="merge_aux&#39;vc.19.0" expl="assertion" proved="true">
   <proof prover="3"><result status="valid" time="0.228091" steps="58179"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="merge_aux&#39;vc.20" expl="assertion" proved="true">
  <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
   <goal name="merge_aux&#39;vc.20.0" expl="assertion" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="merge_aux&#39;vc.20.0.0" expl="assertion" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="merge_aux&#39;vc.20.0.0.0" expl="assertion" proved="true">
     <proof prover="3" timelimit="5" memlimit="2000"><result status="valid" time="1.613536" steps="212081"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="merge_aux&#39;vc.21" expl="precondition" proved="true">
  <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
   <goal name="merge_aux&#39;vc.21.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.017411" steps="50"/></proof>
   <proof prover="3"><result status="valid" time="0.059766" steps="17646"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="merge_aux&#39;vc.22" expl="precondition" proved="true">
  <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
   <goal name="merge_aux&#39;vc.22.0" expl="precondition" proved="true">
   <transf name="remove" proved="true" arg1="extensionality,create&#39;spec,create&#39;spec&#39;0,empty&#39;def,set&#39;spec,set&#39;spec&#39;0,set&#39;spec&#39;1,set&#39;def,([&lt;-])&#39;def,singleton&#39;spec,singleton&#39;spec&#39;0,cat_back,cat_back&#39;0,snoc_dec,cat_dec">
    <goal name="merge_aux&#39;vc.22.0.0" expl="precondition" proved="true">
    <transf name="remove" proved="true" arg1="singleton,cons,snoc,(++),mem,occ_all,seq_eq_sub,exchange">
     <goal name="merge_aux&#39;vc.22.0.0.0" expl="precondition" proved="true">
     <proof prover="3"><result status="valid" time="0.050232" steps="14247"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="merge_aux&#39;vc.23" expl="precondition" proved="true">
  <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
   <goal name="merge_aux&#39;vc.23.0" expl="precondition" proved="true">
   <proof prover="2" timelimit="5"><result status="valid" time="0.015861" steps="56"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="merge_aux&#39;vc.24" expl="precondition" proved="true">
  <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
   <goal name="merge_aux&#39;vc.24.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.063940" steps="19069"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="merge_aux&#39;vc.25" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="merge_aux&#39;vc.25.0" expl="precondition" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="merge_aux&#39;vc.25.0.0" expl="precondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="merge_aux&#39;vc.25.0.0.0" expl="precondition" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="merge_aux&#39;vc.25.0.0.0.0" expl="precondition" proved="true">
      <proof prover="3" timelimit="6" memlimit="4000"><result status="valid" time="0.152815" steps="28104"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
   <goal name="merge_aux&#39;vc.25.0" expl="precondition" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="merge_aux&#39;vc.25.0.0" expl="precondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="merge_aux&#39;vc.25.0.0.0" expl="precondition" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="merge_aux&#39;vc.25.0.0.0.0" expl="precondition" proved="true">
      <proof prover="3" timelimit="6" memlimit="4000"><result status="valid" time="0.133786" steps="34417"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="merge_aux&#39;vc.26" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.071244" steps="19735"/></proof>
  </goal>
  <goal name="merge_aux&#39;vc.27" expl="precondition" proved="true">
  <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
   <goal name="merge_aux&#39;vc.27.0" expl="precondition" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="merge_aux&#39;vc.27.0.0" expl="precondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="merge_aux&#39;vc.27.0.0.0" expl="precondition" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="merge_aux&#39;vc.27.0.0.0.0" expl="precondition" proved="true">
      <proof prover="1"><result status="valid" time="0.569924" steps="95975"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="merge_aux&#39;vc.28" expl="precondition" proved="true">
  <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
   <goal name="merge_aux&#39;vc.28.0" expl="precondition" proved="true">
   <proof prover="3" timelimit="5" memlimit="2000"><result status="valid" time="3.047567" steps="450425"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="merge_aux&#39;vc.29" expl="precondition" proved="true">
  <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
   <goal name="merge_aux&#39;vc.29.0" expl="precondition" proved="true">
   <proof prover="3" timelimit="5" memlimit="2000"><result status="valid" time="0.282689" steps="65134"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="merge_aux&#39;vc.30" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="merge_aux&#39;vc.30.0" expl="postcondition" proved="true">
   <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
    <goal name="merge_aux&#39;vc.30.0.0" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="0.130860" steps="49673"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="merge_aux&#39;vc.30.1" expl="postcondition" proved="true">
   <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
    <goal name="merge_aux&#39;vc.30.1.0" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="0.122951" steps="38719"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="merge_aux&#39;vc.31" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="merge_aux&#39;vc.31.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="merge_aux&#39;vc.31.0.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.170846" steps="2133"/></proof>
    </goal>
    <goal name="merge_aux&#39;vc.31.0.1" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.083176" steps="68"/></proof>
    </goal>
    <goal name="merge_aux&#39;vc.31.0.2" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.186397" steps="1992"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="merge_aux&#39;vc.31.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="merge_aux&#39;vc.31.1.0" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="0.071598" steps="21698"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Sort_Merge" proved="true">
 <goal name="merge&#39;vc" expl="VC for merge" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="merge&#39;vc.0" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.028358" steps="9249"/></proof>
  </goal>
  <goal name="merge&#39;vc.1" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.055532" steps="14017"/></proof>
  </goal>
  <goal name="merge&#39;vc.2" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.055983" steps="14036"/></proof>
  </goal>
  <goal name="merge&#39;vc.3" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.059654" steps="14756"/></proof>
  </goal>
  <goal name="merge&#39;vc.4" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.052842" steps="14514"/></proof>
  </goal>
  <goal name="merge&#39;vc.5" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.053582" steps="14638"/></proof>
  </goal>
  <goal name="merge&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.049041" steps="13940"/></proof>
  </goal>
  <goal name="merge&#39;vc.7" expl="postcondition" proved="true">
  <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
   <goal name="merge&#39;vc.7.0" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.053909" steps="15834"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Sort_PermutFrameAppL_Impl" proved="true">
 <goal name="vc_permut_frame_app_l" proved="true">
 <proof prover="3"><result status="valid" time="0.292431" steps="81280"/></proof>
 </goal>
</theory>
<theory name="Sort_PermutSym_Impl" proved="true">
 <goal name="vc_permut_sym" proved="true">
 <proof prover="2"><result status="valid" time="0.013322" steps="12"/></proof>
 </goal>
</theory>
<theory name="Sort_PermLeft_Impl" proved="true">
 <goal name="vc_perm_left" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="vc_perm_left.0" proved="true">
  <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
   <goal name="vc_perm_left.0.0" proved="true">
   <proof prover="2"><result status="valid" time="0.184710" steps="3382"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="vc_perm_left.1" proved="true">
  <proof prover="3"><result status="valid" time="0.609237" steps="165609"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Sort_PermRight_Impl" proved="true">
 <goal name="vc_perm_right" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="vc_perm_right.0" proved="true">
  <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
   <goal name="vc_perm_right.0.0" proved="true">
   <proof prover="2"><result status="valid" time="0.613834" steps="9373"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="vc_perm_right.1" proved="true">
  <proof prover="3"><result status="valid" time="0.560412" steps="165168"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Sort_Split" proved="true">
 <goal name="split&#39;vc" expl="VC for split" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="split&#39;vc.0" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.046263" steps="10223"/></proof>
  </goal>
  <goal name="split&#39;vc.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.014628" steps="6"/></proof>
  </goal>
  <goal name="split&#39;vc.2" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.016211" steps="66"/></proof>
  </goal>
  <goal name="split&#39;vc.3" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.019350" steps="203"/></proof>
  </goal>
  <goal name="split&#39;vc.4" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.014753" steps="23"/></proof>
  </goal>
  <goal name="split&#39;vc.5" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.012923" steps="38"/></proof>
  </goal>
  <goal name="split&#39;vc.6" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.032976" steps="121339"/></proof>
  </goal>
  <goal name="split&#39;vc.7" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.013066" steps="38"/></proof>
  </goal>
  <goal name="split&#39;vc.8" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.033812" steps="121339"/></proof>
  </goal>
  <goal name="split&#39;vc.9" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.421133" steps="94717"/></proof>
  </goal>
  <goal name="split&#39;vc.10" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.107751" steps="473327"/></proof>
  </goal>
  <goal name="split&#39;vc.11" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="split&#39;vc.11.0" expl="loop invariant preservation" proved="true">
   <proof prover="3"><result status="valid" time="0.164043" steps="37716"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="split&#39;vc.12" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.092886" steps="23819"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Sort_MergeSort" proved="true">
 <goal name="merge_sort&#39;vc" expl="VC for merge_sort" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="merge_sort&#39;vc.0" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.051386" steps="15224"/></proof>
  </goal>
  <goal name="merge_sort&#39;vc.1" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.051106" steps="15284"/></proof>
  </goal>
  <goal name="merge_sort&#39;vc.2" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.050280" steps="14815"/></proof>
  </goal>
  <goal name="merge_sort&#39;vc.3" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.050204" steps="14820"/></proof>
  </goal>
  <goal name="merge_sort&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.079550" steps="25326"/></proof>
  </goal>
  <goal name="merge_sort&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.595005" steps="158639"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
